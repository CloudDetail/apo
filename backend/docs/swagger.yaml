basePath: /
definitions:
  alert.AEventWithWRecord:
    properties:
      alertDirection:
        type: string
      alertId:
        type: string
      analyzeErr:
        type: string
      analyzeRunId:
        type: string
      createTime:
        type: string
      detail:
        type: string
      duration:
        type: string
      endTime:
        type: string
      group:
        type: string
      id:
        type: string
      input:
        type: string
      isValid:
        description: 'Deprecated: use [Validity] instead, will remove after 1.7.x'
        type: string
      lastCheckAt:
        type: string
      lastStatus:
        type: string
      name:
        type: string
      notifyAt:
        type: string
      notifyFailed:
        type: string
      notifySuccess:
        type: string
      output:
        type: string
      rawTags:
        allOf:
        - $ref: '#/definitions/alert.RawTags'
        description: |-
          HACK the existing clickhouse query uses `tags` as the filter field
          so enrichTags in ch is named as 'tags' to filter new alertInput
      receivedTime:
        type: string
      severity:
        type: string
      source:
        type: string
      sourceId:
        type: string
      status:
        type: string
      tags:
        additionalProperties:
          type: string
        type: object
      tagsDisplay:
        items:
          $ref: '#/definitions/alert.TagDisplay'
        type: array
      updateTime:
        type: string
      validity:
        type: string
      workflowId:
        type: string
      workflowName:
        type: string
      workflowParams:
        $ref: '#/definitions/alert.WorkflowParams'
      workflowRunId:
        type: string
    type: object
  alert.AlertEnrichCondition:
    properties:
      expr:
        type: string
      fromField:
        type: string
      operation:
        description: support match,not match,gt,lt,ge,le,eq
        type: string
    type: object
  alert.AlertEnrichRuleConfigRequest:
    properties:
      enrichRuleConfigs:
        items:
          $ref: '#/definitions/alert.AlertEnrichRuleVO'
        type: array
      setAsDefault:
        type: boolean
      sourceId:
        type: string
    type: object
  alert.AlertEnrichRuleVO:
    properties:
      conditions:
        description: '--------------- conditions ----------------'
        items:
          $ref: '#/definitions/alert.AlertEnrichCondition'
        type: array
      customTag:
        type: string
      enrichRuleId:
        type: string
      fromField:
        type: string
      fromRegex:
        type: string
      rType:
        type: string
      schema:
        description: '---------------- schemaMapping --------------'
        type: string
      schemaSource:
        type: string
      schemaTargets:
        description: '--------------- schemaMapping -------------'
        items:
          $ref: '#/definitions/alert.AlertEnrichSchemaTarget'
        type: array
      sourceId:
        type: string
      targetTagId:
        description: '---------------- tagMapping -----------------'
        type: integer
    type: object
  alert.AlertEnrichSchemaTarget:
    properties:
      customTag:
        type: string
      schemaField:
        type: string
      targetTagId:
        type: integer
    type: object
  alert.AlertEvent:
    properties:
      alertId:
        type: string
      createTime:
        type: string
      detail:
        type: string
      endTime:
        type: string
      group:
        type: string
      id:
        type: string
      name:
        type: string
      rawTags:
        allOf:
        - $ref: '#/definitions/alert.RawTags'
        description: |-
          HACK the existing clickhouse query uses `tags` as the filter field
          so enrichTags in ch is named as 'tags' to filter new alertInput
      receivedTime:
        type: string
      severity:
        type: string
      source:
        type: string
      sourceId:
        type: string
      status:
        type: string
      tags:
        additionalProperties:
          type: string
        type: object
      tagsDisplay:
        items:
          $ref: '#/definitions/alert.TagDisplay'
        type: array
      updateTime:
        type: string
    type: object
  alert.AlertSchemaRequest:
    properties:
      schema:
        type: string
    type: object
  alert.AlertSource:
    properties:
      clusters:
        items:
          $ref: '#/definitions/integration.Cluster'
        type: array
      sourceId:
        type: string
      sourceName:
        type: string
      sourceType:
        type: string
    type: object
  alert.CheckSchemaIsUsedReponse:
    properties:
      alertSourceNames:
        items:
          type: string
        type: array
      isUsing:
        type: boolean
    type: object
  alert.CreateSchemaRequest:
    properties:
      columns:
        items:
          type: string
        type: array
      fullRows:
        items:
          items:
            type: string
          type: array
        type: array
      schema:
        type: string
    type: object
  alert.DefaultAlertEnrichRuleRequest:
    properties:
      sourceType:
        type: string
    type: object
  alert.DefaultAlertEnrichRuleResponse:
    properties:
      enrichRuleConfigs:
        items:
          $ref: '#/definitions/alert.AlertEnrichRuleVO'
        type: array
      sourceType:
        type: string
    type: object
  alert.GetAlertEnrichRuleResponse:
    properties:
      enrichRuleConfigs:
        items:
          $ref: '#/definitions/alert.AlertEnrichRuleVO'
        type: array
      sourceId:
        type: string
    type: object
  alert.GetSchemaColumnsResponse:
    properties:
      columns:
        items:
          type: string
        type: array
    type: object
  alert.GetSchemaDataReponse:
    properties:
      columns:
        items:
          type: string
        type: array
      rows:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  alert.GetTargetTagsResponse:
    properties:
      targetTags:
        items:
          $ref: '#/definitions/alert.TargetTag'
        type: array
    type: object
  alert.ListAlertSourceResponse:
    properties:
      alertSources:
        items:
          $ref: '#/definitions/alert.AlertSource'
        type: array
    type: object
  alert.ListSchemaResponse:
    properties:
      schemas:
        items:
          type: string
        type: array
    type: object
  alert.ListSchemaWithColumnsResponse:
    properties:
      schemas:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  alert.RawTags:
    additionalProperties: {}
    type: object
  alert.SetDefaultAlertEnrichRuleRequest:
    properties:
      enrichRuleConfigs:
        items:
          $ref: '#/definitions/alert.AlertEnrichRuleVO'
        type: array
      sourceType:
        type: string
    type: object
  alert.SourceFrom:
    properties:
      sourceId:
        type: string
      sourceName:
        type: string
      sourceType:
        type: string
    type: object
  alert.TagDisplay:
    properties:
      key:
        type: string
      name:
        type: string
      value:
        type: string
    type: object
  alert.TargetTag:
    properties:
      describe:
        type: string
      id:
        type: integer
      tagName:
        type: string
      targetTag:
        type: string
    type: object
  alert.UpdateSchemaDataRequest:
    properties:
      clearAll:
        type: boolean
      columns:
        items:
          type: string
        type: array
      newRows:
        items:
          items:
            type: string
          type: array
        type: array
      schema:
        type: string
      updateRows:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  alert.WorkflowParams:
    properties:
      edition:
        type: string
      endTime:
        type: integer
      nodeIp:
        type: string
      nodeName:
        type: string
      params:
        type: string
      startTime:
        type: integer
    type: object
  amconfig.DingTalkConfig:
    properties:
      secret:
        type: string
      sendResolved:
        type: boolean
      url:
        type: string
    type: object
  amconfig.EmailConfig:
    properties:
      authIdentity:
        type: string
      authPassword:
        type: string
      authPasswordFile:
        type: string
      authSecret:
        type: string
      authUsername:
        type: string
      from:
        type: string
      headers:
        additionalProperties:
          type: string
        type: object
      hello:
        type: string
      html:
        type: string
      requireTls:
        type: boolean
      sendResolved:
        type: boolean
      smarthost:
        $ref: '#/definitions/amconfig.HostPort'
      text:
        type: string
      tlsConfig:
        $ref: '#/definitions/httpconfig.TLSConfig'
      to:
        description: Email address to notify.
        type: string
    type: object
  amconfig.HostPort:
    properties:
      host:
        type: string
      port:
        type: string
    type: object
  amconfig.Receiver:
    properties:
      dingTalkConfigs:
        items:
          $ref: '#/definitions/amconfig.DingTalkConfig'
        type: array
      emailConfigs:
        items:
          $ref: '#/definitions/amconfig.EmailConfig'
        type: array
      name:
        description: A unique identifier for this receiver.
        type: string
      webhookConfigs:
        items:
          $ref: '#/definitions/amconfig.WebhookConfig'
        type: array
      wechatConfigs:
        items:
          $ref: '#/definitions/amconfig.WechatConfig'
        type: array
    required:
    - name
    type: object
  amconfig.URL:
    type: object
  amconfig.WebhookConfig:
    properties:
      httpConfig:
        $ref: '#/definitions/httpconfig.HTTPClientConfig'
      maxAlerts:
        description: |-
          MaxAlerts is the maximum number of alerts to be sent per webhook message.
          Alerts exceeding this threshold will be truncated. Setting this to 0
          allows an unlimited number of alerts.
        type: integer
      sendResolved:
        type: boolean
      url:
        allOf:
        - $ref: '#/definitions/amconfig.URL'
        description: URL to send POST request to.
      urlFile:
        type: string
    type: object
  amconfig.WechatConfig:
    properties:
      agentId:
        type: string
      apiSecret:
        type: string
      apiUrl:
        $ref: '#/definitions/amconfig.URL'
      corpId:
        type: string
      httpConfig:
        $ref: '#/definitions/httpconfig.HTTPClientConfig'
      message:
        type: string
      messageType:
        type: string
      sendResolved:
        type: boolean
      toParty:
        type: string
      toTag:
        type: string
      toUser:
        type: string
    type: object
  clickhouse.AlertEventSample:
    properties:
      alarmCount:
        type: integer
      alertKey:
        type: string
      createTime:
        description: fault trigger time
        type: string
      detail:
        type: string
      endTime:
        description: Recovery time (only present at recovery)
        type: string
      group:
        description: Fault group information
        type: string
      id:
        type: string
      name:
        type: string
      raw_tags:
        additionalProperties:
          type: string
        type: object
      receivedTime:
        description: Failure event reception time (used to record data connection,
          no business meaning)
        type: string
      severity:
        $ref: '#/definitions/model.SeverityLevel'
      source:
        type: string
      status:
        $ref: '#/definitions/model.Status'
      tags:
        additionalProperties:
          type: string
        type: object
      updateTime:
        description: Last time the fault occurred
        type: string
    type: object
  clickhouse.FaultLogResult:
    properties:
      containerId:
        type: string
      endTime:
        type: integer
      endpoint:
        type: string
      instanceId:
        type: string
      nodeName:
        type: string
      pid:
        type: integer
      podName:
        type: string
      serviceName:
        type: string
      startTime:
        type: integer
      traceId:
        type: string
    type: object
  clickhouse.LogContent:
    properties:
      body:
        type: string
      timestamp:
        type: integer
    type: object
  clickhouse.Logs:
    properties:
      contents:
        items:
          $ref: '#/definitions/clickhouse.LogContent'
        type: array
      source:
        type: string
    type: object
  clickhouse.ProfilingEvent:
    properties:
      cpuEvents:
        type: string
      endTime:
        type: integer
      innerCalls:
        type: string
      javaFutexEvents:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      offset:
        type: integer
      pid:
        type: integer
      spans:
        type: string
      startTime:
        type: integer
      threadName:
        description: thread name table in labels
        type: string
      tid:
        type: integer
      timestamp:
        type: string
      transactionIds:
        type: string
    type: object
  clickhouse.QueryTraceResult:
    properties:
      apmType:
        type: string
      duration:
        type: integer
      endpoint:
        type: string
      flags:
        additionalProperties:
          type: boolean
        type: object
      instanceId:
        type: string
      isError:
        type: boolean
      isMutated:
        description: whether the delay changes abruptly
        type: integer
      isSlow:
        type: boolean
      labels:
        additionalProperties:
          type: string
        type: object
      metrics:
        additionalProperties:
          type: integer
        type: object
      mutatedValue:
        type: integer
      pid:
        type: integer
      reason:
        type: string
      serviceName:
        type: string
      spanId:
        type: string
      thresholdMultiple:
        type: number
      thresholdValue:
        type: number
      tid:
        type: integer
      timestamp:
        type: integer
      traceId:
        type: string
    type: object
  clickhouse.SpanTraceOptions:
    properties:
      dataType:
        $ref: '#/definitions/request.DataType'
      key:
        type: string
      operation:
        $ref: '#/definitions/request.Operation'
      options: {}
      parentField:
        $ref: '#/definitions/request.ParentField'
      value:
        items:
          type: string
        type: array
    type: object
  code.Failure:
    properties:
      code:
        description: business code
        type: string
      message:
        description: error message
        type: string
    type: object
  database.AlertMetricsData:
    properties:
      group:
        type: string
      name:
        type: string
      pql:
        type: string
      unit:
        type: string
    type: object
  database.AuthDataGroup:
    properties:
      team:
        $ref: '#/definitions/profile.Team'
      type:
        description: view, edit
        type: string
      user:
        $ref: '#/definitions/profile.User'
    type: object
  database.CustomServiceTopology:
    properties:
      clusterId:
        type: string
      expireTime:
        type: integer
      id:
        type: integer
      leftNode:
        type: string
      leftType:
        type: string
      rightNode:
        type: string
      rightType:
        type: string
      startTime:
        type: integer
    type: object
  database.InsertPage:
    properties:
      pageId:
        type: integer
      type:
        description: For now it's grafana or jaeger.
        type: string
      url:
        type: string
    type: object
  database.MenuItem:
    properties:
      abbreviation:
        type: string
      icon:
        type: string
      itemId:
        type: integer
      key:
        type: string
      label:
        description: AKA item name.
        type: string
      router:
        allOf:
        - $ref: '#/definitions/database.Router'
        description: Frontend router.
    type: object
  database.Router:
    properties:
      hideTimeSelector:
        type: boolean
      page:
        $ref: '#/definitions/database.InsertPage'
      routerId:
        type: integer
      to:
        type: string
    type: object
  database.ServiceNameRuleCondition:
    properties:
      id:
        type: integer
      key:
        type: string
      matchType:
        type: string
      ruleId:
        type: integer
      value:
        type: string
    type: object
  datagroup.DataGroup:
    properties:
      authType:
        type: string
      description:
        description: The description of data group.
        type: string
      groupId:
        type: integer
      groupName:
        type: string
      parentGroupId:
        type: integer
      source:
        type: string
    type: object
  httpconfig.Authorization:
    properties:
      credentials:
        type: string
      credentialsFile:
        type: string
      credentialsRef:
        description: CredentialsRef is the name of the secret within the secret manager
          to use as credentials.
        type: string
      type:
        type: string
    type: object
  httpconfig.BasicAuth:
    properties:
      password:
        type: string
      passwordFile:
        type: string
      passwordRef:
        description: PasswordRef is the name of the secret within the secret manager
          to use as the password.
        type: string
      username:
        type: string
      usernameFile:
        type: string
      usernameRef:
        description: UsernameRef is the name of the secret within the secret manager
          to use as the username.
        type: string
    type: object
  httpconfig.HTTPClientConfig:
    properties:
      authorization:
        allOf:
        - $ref: '#/definitions/httpconfig.Authorization'
        description: The HTTP authorization credentials for the targets.
      basicAuth:
        allOf:
        - $ref: '#/definitions/httpconfig.BasicAuth'
        description: The HTTP basic authentication credentials for the targets.
      bearerToken:
        description: |-
          The bearer token for the targets. Deprecated in favour of
          Authorization.Credentials.
        type: string
      bearerTokenFile:
        description: |-
          The bearer token file for the targets. Deprecated in favour of
          Authorization.CredentialsFile.
        type: string
      enableHttp2:
        description: |-
          EnableHTTP2 specifies whether the client should configure HTTP2.
          The omitempty flag is not set, because it would be hidden from the
          marshalled configuration when set to false.
        type: boolean
      followRedirects:
        description: |-
          FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
          The omitempty flag is not set, because it would be hidden from the
          marshalled configuration when set to false.
        type: boolean
      httpHeaders:
        allOf:
        - $ref: '#/definitions/httpconfig.Headers'
        description: |-
          HTTPHeaders specify headers to inject in the requests. Those headers
          could be marshalled back to the users.
      noProxy:
        description: NoProxy contains addresses that should not use a proxy.
        type: string
      oauth2:
        allOf:
        - $ref: '#/definitions/httpconfig.OAuth2'
        description: The OAuth2 client credentials used to fetch a token for the targets.
      proxyConnectHeader:
        allOf:
        - $ref: '#/definitions/httpconfig.ProxyHeader'
        description: |-
          ProxyConnectHeader optionally specifies headers to send to
          proxies during CONNECT requests. Assume that at least _some_ of
          these headers are going to contain secrets and use Secret as the
          value type instead of string.
      proxyFromEnvironment:
        description: |-
          ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function
          to determine proxies.
        type: boolean
      proxyUrl:
        allOf:
        - $ref: '#/definitions/httpconfig.URL'
        description: HTTP proxy server to use to connect to the targets.
      tlsConfig:
        allOf:
        - $ref: '#/definitions/httpconfig.TLSConfig'
        description: TLSConfig to use to connect to the targets.
    type: object
  httpconfig.Header:
    properties:
      files:
        items:
          type: string
        type: array
      secrets:
        items:
          type: string
        type: array
      values:
        items:
          type: string
        type: array
    type: object
  httpconfig.Headers:
    properties:
      headers:
        additionalProperties:
          $ref: '#/definitions/httpconfig.Header'
        type: object
    type: object
  httpconfig.OAuth2:
    properties:
      clientId:
        type: string
      clientSecret:
        type: string
      clientSecretFile:
        type: string
      clientSecretRef:
        description: |-
          ClientSecretRef is the name of the secret within the secret manager to use as the client
          secret.
        type: string
      endpointParams:
        additionalProperties:
          type: string
        type: object
      noProxy:
        description: NoProxy contains addresses that should not use a proxy.
        type: string
      proxyConnectHeader:
        allOf:
        - $ref: '#/definitions/httpconfig.ProxyHeader'
        description: |-
          ProxyConnectHeader optionally specifies headers to send to
          proxies during CONNECT requests. Assume that at least _some_ of
          these headers are going to contain secrets and use Secret as the
          value type instead of string.
      proxyFromEnvironment:
        description: |-
          ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function
          to determine proxies.
        type: boolean
      proxyUrl:
        allOf:
        - $ref: '#/definitions/httpconfig.URL'
        description: HTTP proxy server to use to connect to the targets.
      scopes:
        items:
          type: string
        type: array
      tlsconfig:
        $ref: '#/definitions/httpconfig.TLSConfig'
      tokenUrl:
        type: string
    type: object
  httpconfig.ProxyHeader:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  httpconfig.TLSConfig:
    properties:
      ca:
        description: Text of the CA cert to use for the targets.
        type: string
      caFile:
        description: The CA cert to use for the targets.
        type: string
      caRef:
        description: |-
          CARef is the name of the secret within the secret manager to use as the CA cert for the
          targets.
        type: string
      cert:
        description: Text of the client cert file for the targets.
        type: string
      certFile:
        description: The client cert file for the targets.
        type: string
      certRef:
        description: |-
          CertRef is the name of the secret within the secret manager to use as the client cert for
          the targets.
        type: string
      insecureSkipVerify:
        description: Disable target certificate validation.
        type: boolean
      key:
        description: Text of the client key file for the targets.
        type: string
      keyFile:
        description: The client key file for the targets.
        type: string
      keyRef:
        description: |-
          KeyRef is the name of the secret within the secret manager to use as the client key for
          the targets.
        type: string
      maxVersion:
        description: Maximum TLS version.
        type: integer
      minVersion:
        description: Minimum TLS version.
        type: integer
      serverName:
        description: Used to verify the hostname for the targets.
        type: string
    type: object
  httpconfig.URL:
    type: object
  integration.APOCollector:
    properties:
      collectorAddr:
        type: string
      collectorGatewayAddr:
        type: string
      ports:
        $ref: '#/definitions/integration.CollectorGatewayPorts'
    type: object
  integration.ArmsConfig:
    properties:
      accessKey:
        type: string
      accessSecret:
        type: string
      address:
        type: string
    type: object
  integration.ClickhouseConfig:
    properties:
      address:
        type: string
      cluster:
        type: string
      database:
        type: string
      password:
        description: Encrypt in B64
        type: string
      replication:
        type: boolean
      userName:
        type: string
    type: object
  integration.Cluster:
    properties:
      apoCollector:
        $ref: '#/definitions/integration.APOCollector'
      clusterType:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  integration.ClusterIntegration:
    properties:
      apoCollector:
        $ref: '#/definitions/integration.APOCollector'
      clusterType:
        type: string
      id:
        type: string
      log:
        $ref: '#/definitions/integration.LogIntegration'
      metric:
        $ref: '#/definitions/integration.MetricIntegration'
      name:
        type: string
      trace:
        $ref: '#/definitions/integration.TraceIntegration'
    type: object
  integration.CollectorGatewayPorts:
    additionalProperties:
      type: string
    type: object
  integration.ElasticConfig:
    properties:
      address:
        type: string
      password:
        type: string
      user:
        type: string
    type: object
  integration.GetCInstallConfigResponse:
    properties:
      content:
        items:
          type: integer
        type: array
      fileName:
        type: string
    type: object
  integration.GetCInstallRequest:
    properties:
      clusterId:
        type: string
    type: object
  integration.HuaweiConfig:
    properties:
      accessKey:
        type: string
      accessSecret:
        type: string
    type: object
  integration.JSONField-integration_LogAPI:
    properties:
      obj:
        $ref: '#/definitions/integration.LogAPI'
    type: object
  integration.JSONField-integration_LogSelfCollectConfig:
    properties:
      obj:
        $ref: '#/definitions/integration.LogSelfCollectConfig'
    type: object
  integration.JSONField-integration_MetricAPI:
    properties:
      obj:
        $ref: '#/definitions/integration.MetricAPI'
    type: object
  integration.JSONField-integration_TraceAPI:
    properties:
      obj:
        $ref: '#/definitions/integration.TraceAPI'
    type: object
  integration.JSONField-integration_TraceSelfCollectConfig:
    properties:
      obj:
        $ref: '#/definitions/integration.TraceSelfCollectConfig'
    type: object
  integration.JaegerConfig:
    properties:
      address:
        type: string
    type: object
  integration.ListClusterResponse:
    properties:
      clusters:
        items:
          $ref: '#/definitions/integration.Cluster'
        type: array
    type: object
  integration.LogAPI:
    properties:
      clickhouse:
        $ref: '#/definitions/integration.ClickhouseConfig'
    type: object
  integration.LogIntegration:
    properties:
      clusterId:
        type: string
      dbType:
        type: string
      logAPI:
        $ref: '#/definitions/integration.JSONField-integration_LogAPI'
      mode:
        type: string
      name:
        type: string
      selfCollectConfig:
        $ref: '#/definitions/integration.JSONField-integration_LogSelfCollectConfig'
    type: object
  integration.LogSelfCollectConfig:
    properties:
      mode:
        description: full,abnormal
        type: string
    type: object
  integration.MetricAPI:
    properties:
      victoriametric:
        $ref: '#/definitions/integration.VictoriaMetricConfig'
    type: object
  integration.MetricIntegration:
    properties:
      clusterId:
        type: string
      dsType:
        type: string
      metricAPI:
        $ref: '#/definitions/integration.JSONField-integration_MetricAPI'
      mode:
        type: string
      name:
        type: string
    type: object
  integration.Nbs3Config:
    properties:
      address:
        type: string
      password:
        type: string
      user:
        type: string
    type: object
  integration.PinpointConfig:
    properties:
      address:
        type: string
    type: object
  integration.SkywalkingConfig:
    properties:
      address:
        type: string
      password:
        type: string
      user:
        type: string
    type: object
  integration.TraceAPI:
    properties:
      arms:
        $ref: '#/definitions/integration.ArmsConfig'
      elastic:
        $ref: '#/definitions/integration.ElasticConfig'
      huawei:
        $ref: '#/definitions/integration.HuaweiConfig'
      jaeger:
        $ref: '#/definitions/integration.JaegerConfig'
      nbs3:
        $ref: '#/definitions/integration.Nbs3Config'
      pinpoint:
        $ref: '#/definitions/integration.PinpointConfig'
      skywalking:
        $ref: '#/definitions/integration.SkywalkingConfig'
      timeout:
        description: Second
        type: integer
    type: object
  integration.TraceIntegration:
    properties:
      apmType:
        type: string
      clusterId:
        type: string
      isDeleted:
        type: boolean
      mode:
        type: string
      selfCollectConfig:
        $ref: '#/definitions/integration.JSONField-integration_TraceSelfCollectConfig'
      traceAPI:
        $ref: '#/definitions/integration.JSONField-integration_TraceAPI'
    type: object
  integration.TraceSelfCollectConfig:
    properties:
      instrumentAll:
        type: boolean
      instrumentDisabledNS:
        items:
          type: string
        type: array
      instrumentNS:
        items:
          type: string
        type: array
    type: object
  integration.VictoriaMetricConfig:
    properties:
      password:
        type: string
      serverURL:
        type: string
      username:
        type: string
    type: object
  metric.Labels:
    additionalProperties:
      type: string
    type: object
  metric.QueryInfo:
    properties:
      describe:
        type: string
      id:
        type: integer
      params:
        items:
          type: string
        type: array
      title:
        type: string
      unit:
        type: string
    type: object
  metric.QueryMetricsResult:
    properties:
      msg:
        type: string
      result:
        $ref: '#/definitions/metric.QueryResult'
      results:
        items:
          $ref: '#/definitions/metric.QueryResult'
        type: array
    type: object
  metric.QueryResult:
    properties:
      timeseries:
        items:
          $ref: '#/definitions/metric.Timeseries'
        type: array
      title:
        type: string
      unit:
        type: string
    type: object
  metric.Timeseries:
    properties:
      chart:
        $ref: '#/definitions/response.TempChartObject'
      labels:
        $ref: '#/definitions/metric.Labels'
      legend:
        type: string
      legendFormat:
        type: string
    type: object
  model.AlertDetail:
    properties:
      alertMessage:
        type: string
      alertObject:
        type: string
      alertReason:
        type: string
      timestamp:
        type: integer
    type: object
  model.AlertReason:
    additionalProperties:
      items:
        $ref: '#/definitions/model.AlertDetail'
      type: array
    type: object
  model.CheckDataSourceRequest:
    properties:
      attributes:
        description: query attributes
        type: string
      dataSource:
        description: query Datasource
        type: string
      enabledCapabilities:
        description: query capabilities
        items:
          type: string
        type: array
    required:
    - attributes
    - dataSource
    type: object
  model.CheckDataSourceResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  model.Datasource:
    properties:
      category:
        description: normal or apm
        type: string
      datasource:
        description: namespaceName or serviceName
        type: string
      nested:
        description: Nested datasource (namespace service belongs to or service under
          namespace)
        items:
          type: string
        type: array
      type:
        description: namespace or service
        type: string
    type: object
  model.MatchServiceInstance:
    properties:
      instanceName:
        type: string
      serviceName:
        type: string
      source:
        type: string
    type: object
  model.ModifyTableTTLMap:
    properties:
      TTLExpression:
        type: string
      name:
        type: string
      originalDays:
        type: integer
    type: object
  model.Pagination:
    properties:
      currentPage:
        description: current page number
        type: integer
      pageSize:
        description: number of entries per page
        type: integer
      total:
        description: total number of records
        type: integer
    type: object
  model.Pod:
    properties:
      namespace:
        type: string
      nodeName:
        type: string
      pod:
        type: string
    type: object
  model.Service:
    properties:
      clusterId:
        type: string
      id:
        type: string
      name:
        type: string
      source:
        type: string
    type: object
  model.ServiceInstance:
    properties:
      clusterId:
        type: string
      containerId:
        description: container ID
        type: string
      nodeIp:
        type: string
      nodeName:
        description: hostname
        type: string
      pid:
        description: process number
        type: integer
      podName:
        description: Pod name
        type: string
      service:
        description: service name
        type: string
    type: object
  model.ServiceToplogyNode:
    properties:
      category:
        type: string
      children:
        items:
          type: string
        type: array
      id:
        type: string
      isCustom:
        type: boolean
      name:
        type: string
      parents:
        items:
          type: string
        type: array
    type: object
  model.SeverityLevel:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - SeverityLevelUnknown
    - SeverityLevelInfo
    - SeverityLevelWarning
    - SeverityLevelError
    - SeverityLevelCritical
  model.Status:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - StatusResolved
    - StatusFiring
  model.TopologyNode:
    properties:
      endpoint:
        type: string
      group:
        type: string
      isTraced:
        type: boolean
      outOfGroup:
        type: boolean
      service:
        type: string
      system:
        type: string
    type: object
  model.TopologyRelation:
    properties:
      endpoint:
        type: string
      group:
        type: string
      isTraced:
        type: boolean
      outOfGroup:
        type: boolean
      parentEndpoint:
        type: string
      parentService:
        type: string
      service:
        type: string
      system:
        type: string
    type: object
  profile.Feature:
    properties:
      featureId:
        type: integer
      featureName:
        type: string
      source:
        type: string
    type: object
  profile.Role:
    properties:
      description:
        type: string
      roleId:
        type: integer
      roleName:
        type: string
    type: object
  profile.Team:
    properties:
      description:
        type: string
      featureList:
        items:
          $ref: '#/definitions/profile.Feature'
        type: array
      teamId:
        type: integer
      teamName:
        type: string
      userList:
        items:
          $ref: '#/definitions/profile.User'
        type: array
    type: object
  profile.User:
    properties:
      corporation:
        type: string
      email:
        type: string
      featureList:
        items:
          $ref: '#/definitions/profile.Feature'
        type: array
      phone:
        type: string
      roleList:
        items:
          $ref: '#/definitions/profile.Role'
        type: array
      teamList:
        items:
          $ref: '#/definitions/profile.Team'
        type: array
      userId:
        type: integer
      username:
        type: string
    type: object
  prometheus.MetricsPoint:
    properties:
      timestamp:
        description: time (microseconds)
        type: integer
      value:
        description: value
        type: number
    type: object
  request.AddAlertManagerConfigReceiver:
    properties:
      amConfigFile:
        type: string
      amConfigReceiver:
        $ref: '#/definitions/amconfig.Receiver'
      oldName:
        type: string
      type:
        description: receiver type
        type: string
    type: object
  request.AddAlertRuleRequest:
    properties:
      alertRule:
        $ref: '#/definitions/request.AlertRule'
      alertRuleFile:
        type: string
      groupId:
        type: integer
    type: object
  request.AddLogParseRequest:
    properties:
      isStructured:
        type: boolean
      logTable:
        $ref: '#/definitions/request.LogTable'
      parseInfo:
        type: string
      parseName:
        type: string
      parseRule:
        type: string
      routeRule:
        additionalProperties:
          type: string
        type: object
      serviceName:
        items:
          type: string
        type: array
      tableFields:
        description: custom table fields
        items:
          $ref: '#/definitions/request.Field'
        type: array
    type: object
  request.AddOtherTableRequest:
    properties:
      cluster:
        type: string
      dataBase:
        type: string
      instance:
        type: string
      logField:
        type: string
      tableName:
        type: string
      timeField:
        type: string
    type: object
  request.Alert:
    properties:
      annotations:
        $ref: '#/definitions/request.KV'
      endsAt:
        type: string
      fingerprint:
        type: string
      generatorURL:
        type: string
      labels:
        $ref: '#/definitions/request.KV'
      startsAt:
        type: string
      status:
        type: string
    type: object
  request.AlertEventClassifyRequest:
    properties:
      alertGroup:
        type: string
      alertName:
        type: string
    type: object
  request.AlertEventFilter:
    properties:
      key:
        type: string
      matchExpr:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/request.AlertEventFilterOption'
        type: array
      selected:
        items:
          type: string
        type: array
      wildcard:
        type: boolean
    type: object
  request.AlertEventFilterOption:
    properties:
      display:
        type: string
      value:
        type: string
    type: object
  request.AlertEventSearchFilter:
    properties:
      namespaces:
        items:
          type: string
        type: array
      nodes:
        items:
          type: string
        type: array
      status:
        description: firing or resolved
        items:
          type: string
        type: array
      validity:
        description: valid or invalid or skipped or unknown
        items:
          type: string
        type: array
    type: object
  request.AlertEventSearchRequest:
    properties:
      endTime:
        type: integer
      filter:
        allOf:
        - $ref: '#/definitions/request.AlertEventSearchFilter'
        description: Deprecated
      filters:
        items:
          $ref: '#/definitions/request.AlertEventFilter'
        type: array
      groupId:
        type: integer
      pagination:
        $ref: '#/definitions/model.Pagination'
      sortBy:
        type: string
      startTime:
        type: integer
    type: object
  request.AlertRule:
    properties:
      alert:
        type: string
      annotations:
        additionalProperties:
          type: string
        type: object
      expr:
        type: string
      for:
        type: string
      group:
        type: string
      keepFiringFor:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      record:
        type: string
    required:
    - alert
    - group
    type: object
  request.AuthDataGroup:
    properties:
      subjectId:
        type: integer
      type:
        description: edit or view
        type: string
    type: object
  request.BufferEngineConfig:
    properties:
      maxBytes:
        type: integer
      maxRows:
        type: integer
      maxTime:
        type: integer
      minBytes:
        type: integer
      minRows:
        type: integer
      minTime:
        type: integer
      numLayers:
        type: integer
    type: object
  request.ComplexSpanTraceFilter:
    properties:
      dataType:
        $ref: '#/definitions/request.DataType'
      key:
        type: string
      mergeSep:
        type: string
      operation:
        $ref: '#/definitions/request.Operation'
      parentField:
        $ref: '#/definitions/request.ParentField'
      subFilters:
        items:
          $ref: '#/definitions/request.ComplexSpanTraceFilter'
        type: array
      value:
        items:
          type: string
        type: array
    type: object
  request.CreateTeamRequest:
    properties:
      dataGroupPermission:
        items:
          $ref: '#/definitions/request.DataGroupPermission'
        type: array
      description:
        type: string
      featureList:
        items:
          type: integer
        type: array
      teamName:
        type: string
      userList:
        items:
          type: integer
        type: array
    required:
    - teamName
    type: object
  request.DataGroupOperationRequest:
    properties:
      dataGroupPermission:
        items:
          $ref: '#/definitions/request.DataGroupPermission'
        type: array
      subjectId:
        type: integer
      subjectType:
        type: string
    required:
    - subjectId
    - subjectType
    type: object
  request.DataGroupPermission:
    properties:
      groupId:
        type: integer
      type:
        type: string
    required:
    - groupId
    - type
    type: object
  request.DataType:
    enum:
    - int64
    - uint32
    - uint64
    - string
    - bool
    type: string
    x-enum-varnames:
    - I64Column
    - U32Column
    - U64Column
    - StringColumn
    - BoolColumn
  request.DeleteAlertManagerConfigReceiverRequest:
    properties:
      amConfigFile:
        type: string
      name:
        type: string
      type:
        type: string
    required:
    - name
    type: object
  request.DeleteAlertRuleRequest:
    properties:
      alert:
        type: string
      alertRuleFile:
        type: string
      group:
        type: string
    required:
    - alert
    - group
    type: object
  request.DeleteCustomTopologyRequest:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  request.DeleteLogParseRequest:
    properties:
      dataBase:
        type: string
      parseName:
        type: string
      tableName:
        type: string
    type: object
  request.DeleteOtherTableRequest:
    properties:
      dataBase:
        type: string
      instance:
        type: string
      tableName:
        type: string
    type: object
  request.DeleteServiceNameRuleRequest:
    properties:
      ruleId:
        type: integer
    required:
    - ruleId
    type: object
  request.Field:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  request.ForwardToDingTalkRequest:
    properties:
      ExternalURL:
        type: string
      alerts:
        items:
          $ref: '#/definitions/request.Alert'
        type: array
      commonAnnotations:
        $ref: '#/definitions/request.KV'
      commonLabels:
        $ref: '#/definitions/request.KV'
      groupLabels:
        $ref: '#/definitions/request.KV'
      receiver:
        type: string
      status:
        type: string
      truncatedAlerts:
        type: integer
    type: object
  request.GetAlertDetailRequest:
    properties:
      alertId:
        type: string
      endTime:
        type: integer
      eventId:
        type: string
      locateEvent:
        type: boolean
      pagination:
        $ref: '#/definitions/model.Pagination'
      startTime:
        type: integer
    type: object
  request.GetAlertManagerConfigReceverRequest:
    properties:
      amConfigFile:
        type: string
      currentPage:
        type: integer
      name:
        type: string
      pageSize:
        type: integer
      rType:
        type: string
      refreshCache:
        type: boolean
    type: object
  request.GetAlertRuleRequest:
    properties:
      alert:
        type: string
      alertRuleFile:
        type: string
      currentPage:
        type: integer
      group:
        type: string
      groupId:
        type: integer
      groups:
        items:
          type: string
        type: array
      keyword:
        type: string
      pageSize:
        type: integer
      refreshCache:
        type: boolean
      severity:
        description: alarm level info warning...
        items:
          type: string
        type: array
    type: object
  request.GetAlertSlienceConfigRequest:
    properties:
      alertId:
        type: string
    type: object
  request.GetDataGroupRequest:
    properties:
      currentPage:
        type: integer
      datasourceList:
        items:
          $ref: '#/definitions/model.Datasource'
        type: array
      groupName:
        type: string
      pageSize:
        type: integer
    type: object
  request.GetFaultLogContentRequest:
    properties:
      containerId:
        type: string
      endTime:
        type: integer
      endpoint:
        type: string
      instanceId:
        type: string
      nodeName:
        type: string
      pid:
        type: integer
      podName:
        type: string
      serviceName:
        description: unused
        type: string
      sourceFrom:
        description: log data source
        type: string
      startTime:
        type: integer
      traceId:
        type: string
    type: object
  request.GetFaultLogPageListRequest:
    properties:
      clusterIds:
        items:
          type: string
        type: array
      containerId:
        description: container name
        type: string
      endTime:
        description: query end time
        type: integer
      groupId:
        description: Data group
        type: integer
      instance:
        description: instance name
        type: string
      namespaces:
        items:
          type: string
        type: array
      nodeName:
        description: hostname
        type: string
      pageNum:
        description: page
        type: integer
      pageSize:
        description: display number per page
        type: integer
      pid:
        description: process number
        type: integer
      pod:
        type: string
      service:
        description: query service name
        items:
          type: string
        type: array
      startTime:
        description: query start time
        minimum: 0
        type: integer
      traceId:
        description: TraceId
        type: string
    required:
    - endTime
    type: object
  request.GetServiceREDChartsRequest:
    properties:
      clusterIds:
        items:
          type: string
        type: array
      endTime:
        type: integer
      endpointList:
        items:
          type: string
        type: array
      groupId:
        type: integer
      serviceList:
        items:
          type: string
        type: array
      startTime:
        type: integer
      step:
        type: integer
    type: object
  request.GetServiceRouteRequest:
    properties:
      serviceName:
        items:
          type: string
        type: array
    type: object
  request.GetTraceFilterValueRequest:
    properties:
      endTime:
        description: query end time
        type: integer
      filter:
        $ref: '#/definitions/request.SpanTraceFilter'
      searchText:
        description: query keyword
        type: string
      startTime:
        description: query start time
        minimum: 0
        type: integer
    required:
    - endTime
    type: object
  request.GetTracePageListRequest:
    properties:
      clusterIds:
        items:
          type: string
        type: array
      containerId:
        description: container name
        type: string
      endTime:
        description: query end time
        type: integer
      endpoint:
        description: query Endpoint
        type: string
      filters:
        description: filter
        items:
          $ref: '#/definitions/request.ComplexSpanTraceFilter'
        type: array
      groupId:
        description: Data group id
        type: integer
      instance:
        description: instance name
        type: string
      namespace:
        items:
          type: string
        type: array
      nodeName:
        description: hostname
        type: string
      pageNum:
        description: page
        type: integer
      pageSize:
        type: integer
      pid:
        description: process number
        type: integer
      service:
        description: query service name
        items:
          type: string
        type: array
      startTime:
        description: query start time
        minimum: 0
        type: integer
      traceId:
        description: TraceId
        type: string
    required:
    - endTime
    type: object
  request.GroupSubsOperationRequest:
    properties:
      groupId:
        type: integer
      teamList:
        items:
          $ref: '#/definitions/request.AuthDataGroup'
        type: array
      userList:
        items:
          $ref: '#/definitions/request.AuthDataGroup'
        type: array
    required:
    - groupId
    type: object
  request.InputAlertManagerRequest:
    properties:
      ExternalURL:
        type: string
      alerts:
        items:
          $ref: '#/definitions/request.Alert'
        type: array
      commonAnnotations:
        $ref: '#/definitions/request.KV'
      commonLabels:
        $ref: '#/definitions/request.KV'
      groupLabels:
        $ref: '#/definitions/request.KV'
      receiver:
        type: string
      status:
        type: string
      truncatedAlerts:
        type: integer
    type: object
  request.KV:
    additionalProperties:
      type: string
    type: object
  request.LogIndexRequest:
    properties:
      column:
        type: string
      dataBase:
        type: string
      endTime:
        type: integer
      logField:
        type: string
      query:
        type: string
      startTime:
        minimum: 0
        type: integer
      tableName:
        type: string
      timeField:
        type: string
    required:
    - endTime
    type: object
  request.LogQueryContextRequest:
    properties:
      dataBase:
        type: string
      tableName:
        type: string
      tags:
        additionalProperties:
          type: string
        type: object
      timestamp:
        type: integer
    type: object
  request.LogQueryRequest:
    properties:
      dataBase:
        type: string
      endTime:
        type: integer
      isExternal:
        type: boolean
      logField:
        type: string
      pageNum:
        type: integer
      pageSize:
        type: integer
      query:
        type: string
      startTime:
        minimum: 0
        type: integer
      tableName:
        type: string
      timeField:
        type: string
    required:
    - endTime
    type: object
  request.LogTable:
    properties:
      buffer:
        $ref: '#/definitions/request.BufferEngineConfig'
      fields:
        items:
          $ref: '#/definitions/request.Field'
        type: array
      ttl:
        type: integer
    type: object
  request.LogTableInfoRequest:
    type: object
  request.MarkAlertResolvedManuallyRequest:
    properties:
      alertId:
        type: string
    type: object
  request.Operation:
    enum:
    - EQUAL
    - NOT_EQUAL
    - IN
    - NOT_IN
    - LIKE
    - NOT_LIKE
    - EXISTS
    - NOT_EXISTS
    - CONTAINS
    - NOT_CONTAINS
    - GREATER_THAN
    - LESS_THAN
    type: string
    x-enum-varnames:
    - OpEqual
    - OpNotEqual
    - OpIn
    - OpNotIn
    - OpLike
    - OpNotLike
    - OpExists
    - OpNotExists
    - OpContains
    - OpNotContains
    - OpGreaterThan
    - OpLessThan
  request.OtherTableInfoRequest:
    properties:
      dataBase:
        type: string
      tableName:
        type: string
    type: object
  request.OtherTableRequest:
    type: object
  request.ParentField:
    enum:
    - labels
    - flags
    type: string
    x-enum-varnames:
    - PF_Labels
    - PF_Flags
  request.QueryAPPInfoTagValuesRequest:
    properties:
      endTime:
        type: integer
      key:
        type: string
      startTime:
        type: integer
    type: object
  request.QueryAPPInfoTagsRequest:
    properties:
      endTime:
        type: integer
      startTime:
        type: integer
    type: object
  request.QueryPodsRequest:
    properties:
      endTime:
        description: query end time
        type: integer
      namespace:
        description: query namespace
        type: string
      nodeName:
        description: query node name
        type: string
      pod:
        description: query pod name
        type: string
      startTime:
        description: query start time
        minimum: 0
        type: integer
    required:
    - endTime
    type: object
  request.QueryServiceNameRequest:
    properties:
      cluster:
        description: query Cluster
        type: string
      endTime:
        description: query end time
        type: integer
      startTime:
        description: query start time
        type: integer
      tags:
        $ref: '#/definitions/request.QueryServiceNameTag'
    required:
    - endTime
    - startTime
    type: object
  request.QueryServiceNameTag:
    properties:
      containerId:
        type: string
      nodeName:
        type: string
      pid:
        type: string
      pod:
        type: string
    type: object
  request.RemoveAlertSlienceConfigRequest:
    properties:
      alertId:
        type: string
    type: object
  request.SearchAlertEventFilterValuesRequest:
    properties:
      endTime:
        type: integer
      filters:
        items:
          $ref: '#/definitions/request.AlertEventFilter'
        type: array
      searchKey:
        type: string
      startTime:
        type: integer
    type: object
  request.SetAlertSlienceConfigRequest:
    properties:
      alertId:
        type: string
      forDuration:
        type: string
    type: object
  request.SetServiceNameRuleConditionRequest:
    properties:
      conditionId:
        type: integer
      key:
        type: string
      matchType:
        type: string
      value:
        type: string
    type: object
  request.SetServiceNameRuleRequest:
    properties:
      clusterId:
        type: string
      conditions:
        items:
          $ref: '#/definitions/request.SetServiceNameRuleConditionRequest'
        type: array
      ruleId:
        type: integer
      service:
        type: string
    type: object
  request.SetSingleTTLRequest:
    properties:
      day:
        description: save data cycle days
        type: integer
      name:
        description: table name
        type: string
    required:
    - day
    - name
    type: object
  request.SetTTLRequest:
    properties:
      dataType:
        description: type (log, trace, Kubernetes, other)
        enum:
        - logs
        - trace
        - k8s
        - other
        - topology
        type: string
      day:
        description: save data cycle days
        type: integer
    required:
    - dataType
    - day
    type: object
  request.SpanTraceFilter:
    properties:
      dataType:
        $ref: '#/definitions/request.DataType'
      key:
        type: string
      operation:
        $ref: '#/definitions/request.Operation'
      parentField:
        $ref: '#/definitions/request.ParentField'
      value:
        items:
          type: string
        type: array
    type: object
  request.UpdateAlertManagerConfigReceiver:
    properties:
      amConfigFile:
        type: string
      amConfigReceiver:
        $ref: '#/definitions/amconfig.Receiver'
      oldName:
        type: string
      type:
        description: receiver type
        type: string
    type: object
  request.UpdateAlertRuleRequest:
    properties:
      alertRule:
        $ref: '#/definitions/request.AlertRule'
      alertRuleFile:
        type: string
      groupId:
        type: integer
      oldAlert:
        type: string
      oldGroup:
        type: string
    required:
    - oldAlert
    - oldGroup
    type: object
  request.UpdateLogParseRequest:
    properties:
      dataBase:
        type: string
      isStructured:
        type: boolean
      parseInfo:
        type: string
      parseName:
        type: string
      parseRule:
        type: string
      routeRule:
        additionalProperties:
          type: string
        type: object
      serviceName:
        items:
          type: string
        type: array
      tableFields:
        items:
          $ref: '#/definitions/request.Field'
        type: array
      tableName:
        type: string
    type: object
  request.UpdateTeamRequest:
    properties:
      dataGroupPermission:
        items:
          $ref: '#/definitions/request.DataGroupPermission'
        type: array
      description:
        type: string
      featureList:
        items:
          type: integer
        type: array
      teamId:
        type: integer
      teamName:
        type: string
      userList:
        items:
          type: integer
        type: array
    required:
    - teamId
    - teamName
    type: object
  response.AddOtherTableResponse:
    properties:
      error:
        type: string
    type: object
  response.AlertEventClassifyResponse:
    properties:
      workflowId:
        type: string
    type: object
  response.AlertEventFilterLabelKeysResponse:
    properties:
      labels:
        items:
          type: string
        type: array
    type: object
  response.AlertEventFiltersResponse:
    properties:
      filters:
        items:
          $ref: '#/definitions/request.AlertEventFilter'
        type: array
    type: object
  response.AlertEventSearchResponse:
    properties:
      alertCheckId:
        type: string
      alertEventAnalyzeWorkflowId:
        type: string
      counts:
        additionalProperties:
          type: integer
        type: object
      events:
        items:
          $ref: '#/definitions/alert.AEventWithWRecord'
        type: array
      pagination:
        $ref: '#/definitions/model.Pagination'
    type: object
  response.CheckAlertRuleResponse:
    properties:
      available:
        type: boolean
    type: object
  response.CheckServiceNameRuleResponse:
    properties:
      instances:
        items:
          $ref: '#/definitions/model.MatchServiceInstance'
        type: array
    type: object
  response.ClusterScopedDatasource:
    properties:
      clusterId:
        type: string
      clusterName:
        type: string
      namespaceMap:
        additionalProperties:
          items:
            type: string
          type: array
        description: 'namespace: services'
        type: object
      serviceMap:
        additionalProperties:
          items:
            type: string
          type: array
        description: 'service: endpoints'
        type: object
    type: object
  response.Column:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  response.DBInfo:
    properties:
      dataBase:
        type: string
      tables:
        items:
          $ref: '#/definitions/response.LogTableInfo'
        type: array
    type: object
  response.DeleteOtherTableResponse:
    properties:
      error:
        type: string
    type: object
  response.Duration:
    properties:
      endTime:
        description: Timestamp of the response network packet, in microseconds
        type: integer
      responseDuration:
        description: Response delay
        type: integer
      startTime:
        description: The timestamp of the request network packet, in microseconds.
        type: integer
    type: object
  response.EntryInstanceData:
    properties:
      alertReason:
        $ref: '#/definitions/model.AlertReason'
      appStatus:
        description: application alarm
        type: string
      containerStatus:
        description: container alarm
        type: string
      endpointCount:
        type: integer
      infrastructureStatus:
        description: infrastructure alarm
        type: string
      k8sStatus:
        description: K8s status alarm
        type: string
      logs:
        $ref: '#/definitions/response.TempChartObject'
      logsStatus:
        description: log metric alarm
        type: string
      namespaces:
        description: The namespace of the application. It may be empty
        items:
          type: string
        type: array
      netStatus:
        description: network alarm
        type: string
      serviceDetails:
        items:
          $ref: '#/definitions/response.ServiceDetail'
        type: array
      serviceName:
        type: string
      timestamp:
        type: integer
    type: object
  response.ErrorInfo:
    properties:
      message:
        description: error message
        type: string
      type:
        description: error type
        type: string
    type: object
  response.ErrorInstance:
    properties:
      containerId:
        description: container ID
        type: string
      logs:
        additionalProperties:
          type: number
        description: log alarm
        type: object
      name:
        description: Bad instance name
        type: string
      nodeName:
        description: hostname
        type: string
      pid:
        description: process number
        type: integer
      propations:
        description: error propagation info
        items:
          $ref: '#/definitions/response.ErrorPropation'
        type: array
    type: object
  response.ErrorPropation:
    properties:
      children:
        description: downstream node list
        items:
          $ref: '#/definitions/response.InstanceNode'
        type: array
      current:
        allOf:
        - $ref: '#/definitions/response.InstanceNode'
        description: current node
      errors:
        description: error message
        items:
          $ref: '#/definitions/response.ErrorInfo'
        type: array
      parents:
        description: upstream node list
        items:
          $ref: '#/definitions/response.InstanceNode'
        type: array
      timestamp:
        description: timestamp
        type: integer
      traceId:
        description: TraceId
        type: string
    type: object
  response.GetAlertDetailResponse:
    properties:
      alertCheckId:
        type: string
      alertEventAnalyzeWorkflowId:
        type: string
      currentEvent:
        $ref: '#/definitions/alert.AEventWithWRecord'
      events:
        items:
          $ref: '#/definitions/alert.AEventWithWRecord'
        type: array
      locateIndex:
        type: integer
      pagination:
        $ref: '#/definitions/model.Pagination'
    type: object
  response.GetAlertEventsResponse:
    properties:
      events:
        items:
          $ref: '#/definitions/alert.AlertEvent'
        type: array
      totalCount:
        type: integer
    type: object
  response.GetAlertEventsSampleResponse:
    properties:
      events:
        additionalProperties:
          additionalProperties:
            items:
              $ref: '#/definitions/clickhouse.AlertEventSample'
            type: array
          type: object
        type: object
      status:
        type: string
    type: object
  response.GetAlertManagerConfigReceiverResponse:
    properties:
      amConfigReceivers:
        items:
          $ref: '#/definitions/amconfig.Receiver'
        type: array
      pagination:
        $ref: '#/definitions/model.Pagination'
    type: object
  response.GetAlertRuleFileResponse:
    properties:
      alertRules:
        additionalProperties:
          type: string
        type: object
    type: object
  response.GetAlertRulesResponse:
    properties:
      alertRules:
        items:
          $ref: '#/definitions/request.AlertRule'
        type: array
      pagination:
        $ref: '#/definitions/model.Pagination'
    type: object
  response.GetAlertSlienceConfigResponse:
    properties:
      slience:
        $ref: '#/definitions/slienceconfig.AlertSlienceConfig'
    type: object
  response.GetDataGroupResponse:
    properties:
      currentPage:
        description: current page number
        type: integer
      dataGroupList:
        items:
          $ref: '#/definitions/datagroup.DataGroup'
        type: array
      pageSize:
        description: number of entries per page
        type: integer
      total:
        description: total number of records
        type: integer
    type: object
  response.GetDatasourceResponse:
    properties:
      namespaceList:
        items:
          $ref: '#/definitions/model.Datasource'
        type: array
      serviceList:
        items:
          $ref: '#/definitions/model.Datasource'
        type: array
    type: object
  response.GetDescendantMetricsResponse:
    properties:
      endpoint:
        description: Endpoint
        type: string
      latencyP90:
        description: P90 curve value
        items:
          $ref: '#/definitions/prometheus.MetricsPoint'
        type: array
      serviceName:
        description: service name
        type: string
    type: object
  response.GetDescendantRelevanceResponse:
    properties:
      REDStatus:
        description: RED metric alarm
        type: string
      alertReason:
        $ref: '#/definitions/model.AlertReason'
      appStatus:
        description: application alarm
        type: string
      containerStatus:
        description: container alarm
        type: string
      delaySource:
        description: main source of delay unknown/self/dependency
        type: string
      distance:
        description: delay curve difference
        type: number
      distanceType:
        description: delay curve difference calculation method, there are four types
          of euclidean/pearson/dtw/failed/net_failed
        type: string
      endpoint:
        description: Endpoint
        type: string
      group:
        description: service type
        type: string
      infrastructureStatus:
        description: infrastructure alarm
        type: string
      isTraced:
        description: whether to trace
        type: boolean
      k8sStatus:
        description: K8s status alarm
        type: string
      logsStatus:
        description: log metric alarm
        type: string
      netStatus:
        description: network alarm
        type: string
      serviceName:
        description: service name
        type: string
      timestamp:
        description: Last deployment time
        type: integer
    type: object
  response.GetErrorInstanceResponse:
    properties:
      instances:
        description: error instance list
        items:
          $ref: '#/definitions/response.ErrorInstance'
        type: array
      status:
        description: Bad instance status
        type: string
    type: object
  response.GetFaultLogContentResponse:
    properties:
      logContents:
        $ref: '#/definitions/clickhouse.Logs'
      sources:
        items:
          type: string
        type: array
    type: object
  response.GetFaultLogPageListResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/clickhouse.FaultLogResult'
        type: array
      pagination:
        $ref: '#/definitions/model.Pagination'
    type: object
  response.GetFlameDataResponse:
    properties:
      endTime:
        type: integer
      flameBearer:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      pid:
        type: integer
      sampleRate:
        type: integer
      sampleType:
        type: string
      startTime:
        type: integer
      tid:
        type: integer
    type: object
  response.GetGroupDatasourceResponse:
    properties:
      clusterScoped:
        items:
          $ref: '#/definitions/response.ClusterScopedDatasource'
        type: array
      namespaceMap:
        additionalProperties:
          items:
            type: string
          type: array
        description: 'namespace: services'
        type: object
      serviceMap:
        additionalProperties:
          items:
            type: string
          type: array
        description: 'service: endpoints'
        type: object
    type: object
  response.GetGroupListResponse:
    properties:
      groupsLabel:
        additionalProperties:
          type: string
        type: object
    type: object
  response.GetK8sEventsResponse:
    properties:
      data:
        additionalProperties:
          $ref: '#/definitions/response.K8sEventStatistics'
        type: object
      reasons:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
  response.GetLogMetricsResponse:
    properties:
      containerId:
        description: container ID
        type: string
      errorRate:
        additionalProperties:
          type: number
        description: error rate
        type: object
      latency:
        additionalProperties:
          type: number
        description: delay P90
        type: object
      logs:
        additionalProperties:
          type: number
        description: log alarm
        type: object
      name:
        description: Instance name
        type: string
      nodeName:
        description: hostname
        type: string
      pid:
        description: process number
        type: integer
    type: object
  response.GetMetricPQLResponse:
    properties:
      alertMetricsData:
        items:
          $ref: '#/definitions/database.AlertMetricsData'
        type: array
    type: object
  response.GetMonitorStatusResponse:
    properties:
      monitorList:
        items:
          $ref: '#/definitions/response.MonitorStatus'
        type: array
    type: object
  response.GetOnOffCPUResponse:
    properties:
      profilingEvent:
        items:
          $ref: '#/definitions/clickhouse.ProfilingEvent'
        type: array
    type: object
  response.GetPolarisInferResponse:
    properties:
      inferCause:
        type: string
      inferMetricsPng:
        type: string
    type: object
  response.GetProcessFlameGraphResponse:
    properties:
      endTime:
        type: integer
      flameBearer:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      pid:
        type: integer
      sampleRate:
        type: integer
      sampleType:
        type: string
      startTime:
        type: integer
      tid:
        type: integer
    type: object
  response.GetSQLMetricsResponse:
    properties:
      pagination:
        $ref: '#/definitions/model.Pagination'
      sqlOperationDetails:
        items:
          $ref: '#/definitions/response.SQLOperationDetail'
        type: array
    type: object
  response.GetServiceEndpointRelationResponse:
    properties:
      childRelations:
        description: downstream node call relationship list
        items:
          $ref: '#/definitions/model.TopologyRelation'
        type: array
      current:
        allOf:
        - $ref: '#/definitions/model.TopologyNode'
        description: current service
      parents:
        description: upstream node list
        items:
          $ref: '#/definitions/model.TopologyNode'
        type: array
    type: object
  response.GetServiceEndpointTopologyResponse:
    properties:
      children:
        description: downstream node list
        items:
          $ref: '#/definitions/model.TopologyNode'
        type: array
      current:
        allOf:
        - $ref: '#/definitions/model.TopologyNode'
        description: current service
      parents:
        description: upstream node list
        items:
          $ref: '#/definitions/model.TopologyNode'
        type: array
    type: object
  response.GetServiceEntryEndpointsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.EntryInstanceData'
        type: array
      status:
        type: string
    type: object
  response.GetServiceNamespaceListResponse:
    properties:
      namespaceList:
        items:
          type: string
        type: array
    type: object
  response.GetServiceREDChartsResponse:
    additionalProperties:
      additionalProperties:
        $ref: '#/definitions/response.RedCharts'
      type: object
    type: object
  response.GetServiceRouteResponse:
    properties:
      routeRule:
        additionalProperties:
          type: string
        type: object
    type: object
  response.GetTTLResponse:
    properties:
      k8s:
        items:
          $ref: '#/definitions/model.ModifyTableTTLMap'
        type: array
      logs:
        items:
          $ref: '#/definitions/model.ModifyTableTTLMap'
        type: array
      other:
        items:
          $ref: '#/definitions/model.ModifyTableTTLMap'
        type: array
      topology:
        items:
          $ref: '#/definitions/model.ModifyTableTTLMap'
        type: array
      trace:
        items:
          $ref: '#/definitions/model.ModifyTableTTLMap'
        type: array
    type: object
  response.GetTeamResponse:
    properties:
      currentPage:
        description: current page number
        type: integer
      pageSize:
        description: number of entries per page
        type: integer
      teamList:
        items:
          $ref: '#/definitions/profile.Team'
        type: array
      total:
        description: total number of records
        type: integer
    type: object
  response.GetTraceFilterValueResponse:
    properties:
      traceFilterOptions:
        $ref: '#/definitions/clickhouse.SpanTraceOptions'
    type: object
  response.GetTraceFiltersResponse:
    properties:
      traceFilters:
        items:
          $ref: '#/definitions/request.SpanTraceFilter'
        type: array
    type: object
  response.GetTraceMetricsResponse:
    properties:
      containerId:
        description: container ID
        type: string
      errorRate:
        additionalProperties:
          type: number
        description: error rate
        type: object
      latency:
        additionalProperties:
          type: number
        description: delay P90
        type: object
      logs:
        additionalProperties:
          type: number
        description: log alarm
        type: object
      name:
        description: Instance name
        type: string
      nodeName:
        description: hostname
        type: string
      pid:
        description: process number
        type: integer
    type: object
  response.GetTracePageListResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/clickhouse.QueryTraceResult'
        type: array
      pagination:
        $ref: '#/definitions/model.Pagination'
    type: object
  response.GetUserConfigResponse:
    properties:
      menuItem:
        items:
          $ref: '#/definitions/database.MenuItem'
        type: array
      routes:
        items:
          type: string
        type: array
    type: object
  response.GetUserInfoResponse:
    properties:
      corporation:
        type: string
      email:
        type: string
      featureList:
        items:
          $ref: '#/definitions/profile.Feature'
        type: array
      phone:
        type: string
      roleList:
        items:
          $ref: '#/definitions/profile.Role'
        type: array
      teamList:
        items:
          $ref: '#/definitions/profile.Team'
        type: array
      userId:
        type: integer
      username:
        type: string
    type: object
  response.GetUserListResponse:
    properties:
      currentPage:
        description: current page number
        type: integer
      pageSize:
        description: number of entries per page
        type: integer
      total:
        description: total number of records
        type: integer
      users:
        items:
          $ref: '#/definitions/profile.User'
        type: array
    type: object
  response.IndexItem:
    properties:
      count:
        type: integer
      indexName:
        type: string
      percent:
        type: number
    type: object
  response.Instance:
    properties:
      dataBases:
        items:
          $ref: '#/definitions/response.DBInfo'
        type: array
      instanceName:
        type: string
    type: object
  response.InstanceData:
    properties:
      alertReason:
        $ref: '#/definitions/model.AlertReason'
      appStatus:
        description: application alarm
        type: string
      containerStatus:
        description: container alarm
        type: string
      errorRate:
        $ref: '#/definitions/response.TempChartObject'
      infrastructureStatus:
        description: infrastructure alarm
        type: string
      k8sStatus:
        description: K8s status alarm
        type: string
      latency:
        $ref: '#/definitions/response.TempChartObject'
      logs:
        $ref: '#/definitions/response.TempChartObject'
      logsStatus:
        description: log metric alarm
        type: string
      name:
        description: Instance name
        type: string
      namespace:
        type: string
      netStatus:
        description: network alarm
        type: string
      nodeIP:
        type: string
      nodeName:
        type: string
      timestamp:
        type: integer
      tps:
        $ref: '#/definitions/response.TempChartObject'
    type: object
  response.InstanceNode:
    properties:
      instance:
        type: string
      isTraced:
        type: boolean
      service:
        type: string
    type: object
  response.InstancesRes:
    properties:
      data:
        items:
          $ref: '#/definitions/response.InstanceData'
        type: array
      status:
        type: string
    type: object
  response.K8sEventCountValues:
    properties:
      current:
        type: integer
      lastMonth:
        type: integer
      lastWeek:
        type: integer
    type: object
  response.K8sEventStatistics:
    properties:
      counts:
        $ref: '#/definitions/response.K8sEventCountValues'
      displayName:
        type: string
      eventName:
        type: string
      severity:
        description: Normal or Warning
        type: string
    type: object
  response.ListAlertSlienceConfigResponse:
    properties:
      sliences:
        items:
          $ref: '#/definitions/slienceconfig.AlertSlienceConfig'
        type: array
    type: object
  response.ListCustomTopologyResponse:
    properties:
      topologies:
        items:
          $ref: '#/definitions/database.CustomServiceTopology'
        type: array
    type: object
  response.ListServiceNameRule:
    properties:
      conditions:
        items:
          $ref: '#/definitions/database.ServiceNameRuleCondition'
        type: array
      id:
        type: integer
      serviceName:
        type: string
    type: object
  response.ListServiceNameRuleResponse:
    properties:
      rules:
        items:
          $ref: '#/definitions/response.ListServiceNameRule'
        type: array
    type: object
  response.LogChartResponse:
    properties:
      count:
        type: integer
      error:
        type: string
      histograms:
        items:
          $ref: '#/definitions/response.LogHistogram'
        type: array
      progress:
        type: string
    type: object
  response.LogHistogram:
    properties:
      count:
        type: integer
      from:
        type: integer
      progress:
        type: string
      to:
        type: integer
    type: object
  response.LogIndexResponse:
    properties:
      indexs:
        items:
          $ref: '#/definitions/response.IndexItem'
        type: array
    type: object
  response.LogItem:
    properties:
      content: {}
      logFields:
        additionalProperties: true
        type: object
      tags:
        additionalProperties: true
        type: object
      timestamp:
        type: integer
    type: object
  response.LogParseResponse:
    properties:
      isStructured:
        type: boolean
      parseInfo:
        type: string
      parseName:
        type: string
      parseRule:
        type: string
      routeRule:
        additionalProperties:
          type: string
        type: object
      serviceName:
        items:
          type: string
        type: array
      tableFields:
        items:
          $ref: '#/definitions/request.Field'
        type: array
    type: object
  response.LogQueryContextResponse:
    properties:
      back:
        items:
          $ref: '#/definitions/response.LogItem'
        type: array
      front:
        items:
          $ref: '#/definitions/response.LogItem'
        type: array
    type: object
  response.LogQueryResponse:
    properties:
      cost:
        type: integer
      defaultFields:
        description: tag field
        items:
          type: string
        type: array
      error:
        type: string
      hiddenFields:
        description: log field
        items:
          type: string
        type: array
      limited:
        type: integer
      logs:
        items:
          $ref: '#/definitions/response.LogItem'
        type: array
      query:
        type: string
    type: object
  response.LogTableInfo:
    properties:
      cluster:
        type: string
      logField:
        type: string
      tableName:
        type: string
      timeField:
        type: string
    type: object
  response.LogTableInfoResponse:
    properties:
      instances:
        items:
          $ref: '#/definitions/response.Instance'
        type: array
      parses:
        items:
          $ref: '#/definitions/response.Parse'
        type: array
    type: object
  response.LoginResponse:
    properties:
      accessToken:
        description: accessToken is used to call the interface get resources
        type: string
      corporation:
        type: string
      email:
        type: string
      featureList:
        items:
          $ref: '#/definitions/profile.Feature'
        type: array
      phone:
        type: string
      refreshToken:
        description: refreshToken for refreshing accessToken
        type: string
      roleList:
        items:
          $ref: '#/definitions/profile.Role'
        type: array
      teamList:
        items:
          $ref: '#/definitions/profile.Team'
        type: array
      userId:
        type: integer
      username:
        type: string
    type: object
  response.MonitorStatus:
    properties:
      isAlive:
        type: boolean
      monitorName:
        type: string
    type: object
  response.OtherDB:
    properties:
      dataBase:
        type: string
      tables:
        items:
          $ref: '#/definitions/response.OtherTable'
        type: array
    type: object
  response.OtherTable:
    properties:
      tableName:
        type: string
    type: object
  response.OtherTableInfoResponse:
    properties:
      columns:
        items:
          $ref: '#/definitions/response.Column'
        type: array
      error:
        type: string
    type: object
  response.OtherTableResponse:
    properties:
      otherTables:
        items:
          $ref: '#/definitions/response.OtherDB'
        type: array
    type: object
  response.Parse:
    properties:
      dataBase:
        type: string
      parseInfo:
        type: string
      parseName:
        type: string
      tableName:
        type: string
    type: object
  response.PodMapResponse:
    properties:
      columns:
        items:
          type: string
        type: array
      schemas:
        items:
          properties:
            label_type:
              type: string
            pre_as:
              type: string
            type:
              type: integer
            unit:
              type: string
            value_type:
              type: string
          type: object
        type: array
      values:
        items:
          items: {}
          type: array
        type: array
    type: object
  response.QueryAPPInfoTagValuesResponse:
    properties:
      label:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  response.QueryAPPInfoTagsResponse:
    properties:
      labels:
        items:
          type: string
        type: array
    type: object
  response.QueryChartResult:
    properties:
      timeseries:
        items:
          $ref: '#/definitions/response.Timeseries'
        type: array
      title:
        type: string
      unit:
        type: string
    type: object
  response.QueryPodsResponse:
    properties:
      pods:
        items:
          $ref: '#/definitions/model.Pod'
        type: array
    type: object
  response.QueryServiceEndpointsResponse:
    properties:
      msg:
        type: string
      results:
        items:
          type: string
        type: array
    type: object
  response.QueryServiceInstancesResponse:
    properties:
      msg:
        type: string
      results:
        items:
          $ref: '#/definitions/model.ServiceInstance'
        type: array
    type: object
  response.QueryServiceNameResponse:
    properties:
      msg:
        type: string
      result:
        type: string
    type: object
  response.QueryServiceRedChartsResponse:
    properties:
      msg:
        type: string
      results:
        items:
          $ref: '#/definitions/response.QueryChartResult'
        type: array
    type: object
  response.QueryServicesResponse:
    properties:
      msg:
        type: string
      results:
        items:
          $ref: '#/definitions/model.Service'
        type: array
    type: object
  response.QueryTopologyResponse:
    properties:
      msg:
        type: string
      results:
        items:
          $ref: '#/definitions/model.ServiceToplogyNode'
        type: array
    type: object
  response.RYGScoreDetail:
    properties:
      detail:
        type: string
      key:
        type: string
      score:
        type: integer
    type: object
  response.RYGStatus:
    enum:
    - red
    - yellow
    - green
    type: string
    x-enum-varnames:
    - RED
    - YELLOW
    - GREEN
  response.Ratio:
    properties:
      dayOverDay:
        description: Day-over-Day Growth Rate
        type: number
      weekOverDay:
        description: Week-over-Week Growth Rate
        type: number
    type: object
  response.RedCharts:
    properties:
      errorRate:
        additionalProperties:
          type: number
        type: object
      latency:
        additionalProperties:
          type: number
        type: object
      tps:
        additionalProperties:
          type: number
        type: object
    type: object
  response.RefreshTokenResponse:
    properties:
      accessToken:
        description: accessToken is used to call the interface get resources
        type: string
    type: object
  response.SQLOperationDetail:
    properties:
      dbName:
        description: DBName -> ${database}
        type: string
      dbOperation:
        description: 'DBOperation -> ${operation} ${table}, e.g: SELECT trip'
        type: string
      dbSystem:
        description: 'DBSystem -> ${SQL Type}, e.g: Mysql'
        type: string
      dbUrl:
        type: string
      errorRate:
        $ref: '#/definitions/response.TempChartObject'
      latency:
        $ref: '#/definitions/response.TempChartObject'
      service:
        type: string
      tps:
        allOf:
        - $ref: '#/definitions/response.TempChartObject'
        description: FIXME Tps name is tps, actual requests per minute
    type: object
  response.SegmentLatency:
    properties:
      clientK8SNodeNic:
        allOf:
        - $ref: '#/definitions/response.Duration'
        description: Request and response time collected at the client host NIC
      clientNic:
        allOf:
        - $ref: '#/definitions/response.Duration'
        description: Request and response time collected at the client NIC
      clientProcess:
        allOf:
        - $ref: '#/definitions/response.Duration'
        description: Request and response times collected at the client process
      serverK8SNodeNic:
        allOf:
        - $ref: '#/definitions/response.Duration'
        description: Request and response time collected at the server host NIC
      serverNic:
        allOf:
        - $ref: '#/definitions/response.Duration'
        description: Request and response time collected at the server NIC
      serverProcess:
        allOf:
        - $ref: '#/definitions/response.Duration'
        description: Request and response time collected at the server process
    type: object
  response.ServiceAlertRes:
    properties:
      alertReason:
        $ref: '#/definitions/model.AlertReason'
      appStatus:
        description: application alarm
        type: string
      containerStatus:
        description: container alarm
        type: string
      infrastructureStatus:
        description: infrastructure alarm
        type: string
      k8sStatus:
        description: K8s status alarm
        type: string
      logs:
        $ref: '#/definitions/response.TempChartObject'
      logsStatus:
        description: log metric alarm
        type: string
      netStatus:
        description: network alarm
        type: string
      serviceName:
        type: string
      timestamp:
        type: integer
    type: object
  response.ServiceDetail:
    properties:
      delaySource:
        type: string
      endpoint:
        type: string
      errorRate:
        $ref: '#/definitions/response.TempChartObject'
      latency:
        $ref: '#/definitions/response.TempChartObject'
      tps:
        allOf:
        - $ref: '#/definitions/response.TempChartObject'
        description: FIXME name is tps, actual requests per minute
    type: object
  response.ServiceEndPointsRes:
    properties:
      endpointCount:
        type: integer
      namespaces:
        description: The namespace of the application. It may be empty
        items:
          type: string
        type: array
      serviceDetails:
        items:
          $ref: '#/definitions/response.ServiceDetail'
        type: array
      serviceName:
        type: string
    type: object
  response.ServiceRYGLightRes:
    properties:
      serviceList:
        items:
          $ref: '#/definitions/response.ServiceRYGResult'
        type: array
    type: object
  response.ServiceRYGResult:
    properties:
      percentScore:
        description: percentage total score
        type: integer
      score:
        description: total score
        type: integer
      scoreDetail:
        items:
          $ref: '#/definitions/response.RYGScoreDetail'
        type: array
      serviceName:
        type: string
      status:
        $ref: '#/definitions/response.RYGStatus'
    type: object
  response.SpanSegmentMetricsResponse:
    additionalProperties:
      $ref: '#/definitions/response.SegmentLatency'
    type: object
  response.TempChartObject:
    properties:
      chartData:
        additionalProperties:
          type: number
        description: ChartData chart data
        type: object
      ratio:
        allOf:
        - $ref: '#/definitions/response.Ratio'
        description: Ratio metric Day-over-Day Growth Rate rate
      value:
        description: Value metric average
        type: number
    type: object
  response.Timeseries:
    properties:
      chart:
        $ref: '#/definitions/response.TempChartObject'
      labels:
        additionalProperties:
          type: string
        type: object
      legend:
        type: string
      legendFormat:
        type: string
    type: object
  slienceconfig.AlertSlienceConfig:
    properties:
      alertId:
        type: string
      alertName:
        type: string
      endAt:
        type: string
      for:
        type: string
      group:
        type: string
      id:
        type: integer
      startAt:
        type: string
      tags:
        $ref: '#/definitions/slienceconfig.TagsStr'
    type: object
  slienceconfig.TagsStr:
    additionalProperties:
      type: string
    type: object
info:
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: swagger interface documentation
  version: "2.0"
paths:
  /api/alertinput/cluster/create:
    post:
      consumes:
      - application/json
      description: Create Cluster
      parameters:
      - description: Cluster Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Create Cluster
      tags:
      - API.alertinput
  /api/alertinput/cluster/delete:
    post:
      consumes:
      - application/json
      description: DeleteCluster
      parameters:
      - description: Cluster Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: DeleteCluster
      tags:
      - API.alertinput
  /api/alertinput/cluster/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: ListCluster
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/integration.ListClusterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: ListCluster
      tags:
      - API.alertinput
  /api/alertinput/cluster/update:
    post:
      consumes:
      - application/json
      description: UpdateCluster
      parameters:
      - description: Cluster Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: UpdateCluster
      tags:
      - API.alertinput
  /api/alertinput/event/json:
    post:
      consumes:
      - application/json
      description: Receive data from a specific data source based on a JSON structure
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Receive data from a specific data source based on a JSON structure
      tags:
      - API.alertinput
  /api/alertinput/event/source:
    post:
      consumes:
      - application/json
      description: Receive data based on alarm source configuration
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Receive data based on alarm source configuration
      tags:
      - API.alertinput
  /api/alertinput/schema/column/get:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: GetSchemaColumns
      parameters:
      - description: Schema Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.AlertSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.GetSchemaColumnsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: GetSchemaColumns
      tags:
      - API.alertinput
  /api/alertinput/schema/create:
    post:
      consumes:
      - application/json
      description: CreateSchema
      parameters:
      - description: Schema Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.CreateSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: CreateSchema
      tags:
      - API.alertinput
  /api/alertinput/schema/data/get:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: core.HandlerFunc
      parameters:
      - description: Schema Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.AlertSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.GetSchemaDataReponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: core.HandlerFunc
      tags:
      - API.alertinput
  /api/alertinput/schema/data/update:
    post:
      consumes:
      - application/json
      description: UpdateSchemaData
      parameters:
      - description: Update SchemaData Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.UpdateSchemaDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: UpdateSchemaData
      tags:
      - API.alertinput
  /api/alertinput/schema/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: DeleteSchema
      parameters:
      - description: SchemaInfo
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.AlertSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: DeleteSchema
      tags:
      - API.alertinput
  /api/alertinput/schema/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: ListSchema
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.ListSchemaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: ListSchema
      tags:
      - API.ListSchema
  /api/alertinput/schema/listwithcolumns:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: ListSchemaWithColumns
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.ListSchemaWithColumnsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: ListSchemaWithColumns
      tags:
      - API.alertinput
  /api/alertinput/schema/used/check:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Check whether the mapping structure is used
      parameters:
      - description: Schema Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.AlertSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.CheckSchemaIsUsedReponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Check whether the mapping structure is used
      tags:
      - API.alertinput
  /api/alertinput/source/create:
    post:
      consumes:
      - application/json
      description: Create Alarm Source
      parameters:
      - description: AlertSource
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.AlertSource'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.AlertSource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Create Alarm Source
      tags:
      - API.alertinput
  /api/alertinput/source/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: DeleteAlertSource
      parameters:
      - description: alertSource
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.SourceFrom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.SourceFrom'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: DeleteAlertSource
      tags:
      - API.alertinput
  /api/alertinput/source/enrich/default:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: GetDefaultAlertEnrichRule
      parameters:
      - description: Source Type
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.DefaultAlertEnrichRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.DefaultAlertEnrichRuleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: GetDefaultAlertEnrichRule
      tags:
      - API.alertinput
  /api/alertinput/source/enrich/default/clear:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Clear default alarm rich rules
      parameters:
      - description: Request info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.DefaultAlertEnrichRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Clear default alarm rich rules
      tags:
      - API.alertinput
  /api/alertinput/source/enrich/default/set:
    post:
      consumes:
      - application/json
      description: SetDefaultAlertEnrichRule
      parameters:
      - description: Default EnrichRule
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.SetDefaultAlertEnrichRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: SetDefaultAlertEnrichRule
      tags:
      - API.alertinput
  /api/alertinput/source/enrich/get:
    get:
      consumes:
      - application/json
      description: GetAlertSourceEnrichRule
      parameters:
      - description: Source Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.SourceFrom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.GetAlertEnrichRuleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: GetAlertSourceEnrichRule
      tags:
      - API.alertinput
  /api/alertinput/source/enrich/update:
    post:
      consumes:
      - application/json
      description: UpdateAlertSourceEnrichRule
      parameters:
      - description: Update Config
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.AlertEnrichRuleConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: UpdateAlertSourceEnrichRule
      tags:
      - API.alertinput
  /api/alertinput/source/get:
    post:
      consumes:
      - application/json
      description: GetAlertSource
      parameters:
      - description: Source Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.SourceFrom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.AlertSource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: GetAlertSource
      tags:
      - API.alertinput
  /api/alertinput/source/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: ListAlertSource
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.ListAlertSourceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: ListAlertSource
      tags:
      - API.alertinput
  /api/alertinput/source/update:
    post:
      consumes:
      - application/json
      description: UpdateAlertSource
      parameters:
      - description: alertSource Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/alert.AlertSource'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: UpdateAlertSource
      tags:
      - API.alertinput
  /api/alerts/alertmanager/receiver:
    delete:
      consumes:
      - application/json
      description: delete alarm notification object
      parameters:
      - description: Delete object
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteAlertManagerConfigReceiverRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: delete alarm notification object
      tags:
      - API.alerts
    post:
      consumes:
      - application/json
      description: update alarm notification object
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateAlertManagerConfigReceiver'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: update alarm notification object
      tags:
      - API.alerts
  /api/alerts/alertmanager/receiver/add:
    post:
      consumes:
      - application/json
      description: new alarm notification object
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.AddAlertManagerConfigReceiver'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: new alarm notification object
      tags:
      - API.alerts
  /api/alerts/alertmanager/receiver/list:
    post:
      consumes:
      - application/json
      description: list alarm notification objects
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetAlertManagerConfigReceverRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAlertManagerConfigReceiverResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: list alarm notification objects
      tags:
      - API.alerts
  /api/alerts/event/detail:
    post:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetAlertDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAlertDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alerts/events/classify:
    get:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.AlertEventClassifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AlertEventClassifyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alerts/events/list:
    post:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.AlertEventSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AlertEventSearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alerts/filter/keys:
    get:
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AlertEventFiltersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alerts/filter/labelkeys:
    post:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SearchAlertEventFilterValuesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AlertEventFilterLabelKeysResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alerts/filter/values:
    post:
      consumes:
      - application/json
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SearchAlertEventFilterValuesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/request.AlertEventFilter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alerts/inputs/alertmanager:
    post:
      consumes:
      - application/json
      description: get AlertManager alarm events
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.InputAlertManagerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get AlertManager alarm events
      tags:
      - API.alerts
  /api/alerts/outputs/dingtalk/{uuid}:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: the received alarm is forwarded to the DingTalk
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ForwardToDingTalkRequest'
      - description: DingTalk the uuid corresponding to the webhook
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: the received alarm is forwarded to the DingTalk
      tags:
      - API.alerts
  /api/alerts/resolve:
    post:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.MarkAlertResolvedManuallyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alerts/rule:
    delete:
      consumes:
      - application/x-www-form-urlencoded
      description: delete alarm rules
      parameters:
      - description: Delete object
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteAlertRuleRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: delete alarm rules
      tags:
      - API.alerts
    post:
      consumes:
      - application/json
      description: update alarm rules
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateAlertRuleRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: update alarm rules
      tags:
      - API.alerts
  /api/alerts/rule/add:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: new alarm rules
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.AddAlertRuleRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: new alarm rules
      tags:
      - API.alerts
  /api/alerts/rule/available:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: check whether the alarm rule name is available
      parameters:
      - description: Query alarm rule file name
        in: query
        name: alertRuleFile
        type: string
      - description: group name
        in: query
        name: group
        required: true
        type: string
      - description: Alarm rule name
        in: query
        name: alert
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CheckAlertRuleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: check whether the alarm rule name is available
      tags:
      - API.alerts
  /api/alerts/rule/groups:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get the corresponding interfaces of group and label
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGroupListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the corresponding interfaces of group and label
      tags:
      - API.alerts
  /api/alerts/rule/list:
    post:
      consumes:
      - application/json
      description: list alarm rules
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetAlertRuleRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAlertRulesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: list alarm rules
      tags:
      - API.alerts
  /api/alerts/rule/metrics:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get metrics and PQL in alarm rules
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetMetricPQLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get metrics and PQL in alarm rules
      tags:
      - API.alerts
  /api/alerts/rules:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get basic alarm rules
      parameters:
      - description: Query alarm rule file name, if empty, return all
        in: query
        name: alertRuleFile
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAlertRuleFileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get basic alarm rules
      tags:
      - API.alerts
  /api/alerts/rules/file:
    post:
      consumes:
      - application/json
      description: update basic alarm rules
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateAlertRuleRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: update basic alarm rules
      tags:
      - API.alerts
  /api/alerts/slient:
    delete:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.RemoveAlertSlienceConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
    get:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetAlertSlienceConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAlertSlienceConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
    post:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SetAlertSlienceConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alerts/slient/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListAlertSlienceConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.alerts
  /api/alertsinput/enrich/tags/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: GetTargetTags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alert.GetTargetTagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: GetTargetTags
      tags:
      - API.alertinput
  /api/config/getTTL:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get TTL
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTTLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get TTL
      tags:
      - API.config
  /api/config/setSingleTableTTL:
    post:
      consumes:
      - application/json
      description: configure the TTL of a single table
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SetSingleTTLRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: configure the TTL of a single table
      tags:
      - Api.config
  /api/config/setTTL:
    post:
      consumes:
      - application/json
      description: configuration TTL
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SetTTLRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: configuration TTL
      tags:
      - Api.config
  /api/data/datasource:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Gets all datasource.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetDatasourceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Gets all datasource.
      tags:
      - API.data
  /api/data/group:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Get data group.
      parameters:
      - description: Request
        in: body
        name: Request
        schema:
          $ref: '#/definitions/request.GetDataGroupRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetDataGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get data group.
      tags:
      - API.data
  /api/data/group/data:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get group's datasource.
      parameters:
      - description: Data group's id
        in: query
        name: groupId
        type: integer
      - description: apm or normal, return all when empty
        in: query
        name: category
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGroupDatasourceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get group's datasource.
      tags:
      - API.data
  /api/data/group/operation:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Assign data groups to users or teams, or remove them from data
        groups.
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DataGroupOperationRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Assign data groups to users or teams, or remove them from data groups.
      tags:
      - API.data
  /api/data/sub/group:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get subject's assigned data group.
      parameters:
      - description: The id of authorized subject
        in: query
        name: subjectId
        required: true
        type: integer
      - description: The type of authorized subject
        in: query
        name: subjectType
        required: true
        type: string
      - description: apm or normal, return all if is empty
        in: query
        name: category
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/datagroup.DataGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get subject's assigned data group.
      tags:
      - API.data
  /api/data/subs:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get group's assigned subjects.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      - description: data group's id
        in: query
        name: groupId
        required: true
        type: integer
      - description: subject type that you want to query
        in: query
        name: subjectType
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.AuthDataGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get group's assigned subjects.
      tags:
      - API.data
  /api/data/subs/operation:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Manage group's assigned subject.
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GroupSubsOperationRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Manage group's assigned subject.
      tags:
      - API.data
  /api/data/user/group:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get user's assigned data group.
      parameters:
      - description: user's id
        in: query
        name: userId
        required: true
        type: integer
      - description: apm or normal, return all if is empty
        in: query
        name: category
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/datagroup.DataGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get user's assigned data group.
      tags:
      - API.data
  /api/dataplane/appinfo/tags:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get app info tags.
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.QueryAPPInfoTagsRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryAPPInfoTagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get app info tags.
      tags:
      - API.dataplane
  /api/dataplane/appinfo/tags/values:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get app info tag values.
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.QueryAPPInfoTagValuesRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryAPPInfoTagValuesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get app info tag values.
      tags:
      - API.dataplane
  /api/dataplane/checkDataSource:
    post:
      consumes:
      - application/json
      description: check datasource is valid.
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/model.CheckDataSourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CheckDataSourceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: check datasource is valid.
      tags:
      - API.dataplane
  /api/dataplane/customtopology/create:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Create custom topology.
      parameters:
      - description: cluster Id
        in: query
        name: clusterId
        required: true
        type: string
      - description: parent node name
        in: query
        name: leftNode
        required: true
        type: string
      - description: parent node type
        in: query
        name: leftType
        required: true
        type: string
      - description: child node name
        in: query
        name: rightNode
        required: true
        type: string
      - description: child node type
        in: query
        name: rightType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Create custom topology.
      tags:
      - API.dataplane
  /api/dataplane/customtopology/delete:
    post:
      consumes:
      - application/json
      description: Delete custom topology.
      parameters:
      - description: Delete Custom Topology Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteCustomTopologyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Delete custom topology.
      tags:
      - API.dataplane
  /api/dataplane/customtopology/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: List custom topology.
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListCustomTopologyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: List custom topology.
      tags:
      - API.dataplane
  /api/dataplane/endpoints:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get service's endpoints.
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query cluster name
        in: query
        name: cluster
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryServiceEndpointsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get service's endpoints.
      tags:
      - API.dataplane
  /api/dataplane/instances:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get service's instances.
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query cluster name
        in: query
        name: cluster
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryServiceInstancesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get service's instances.
      tags:
      - API.dataplane
  /api/dataplane/redcharts:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get service's redcharts.
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query cluster name
        in: query
        name: cluster
        type: string
      - description: Query endpoint
        in: query
        name: endpoint
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryServiceRedChartsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get service's redcharts.
      tags:
      - API.dataplane
  /api/dataplane/servicename:
    post:
      consumes:
      - application/json
      description: Get service name by instance.
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.QueryServiceNameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryServiceNameResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get service name by instance.
      tags:
      - API.dataplane
  /api/dataplane/servicename/checkRule:
    post:
      consumes:
      - application/json
      description: Check servicename rule.
      parameters:
      - description: Check ServiceName Rule Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SetServiceNameRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CheckServiceNameRuleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Check servicename rule.
      tags:
      - API.dataplane
  /api/dataplane/servicename/deleteRule:
    post:
      consumes:
      - application/json
      description: Delete servicename rule.
      parameters:
      - description: Delete ServiceName Rule Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteServiceNameRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Delete servicename rule.
      tags:
      - API.dataplane
  /api/dataplane/servicename/listRule:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: List servicename rule.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListServiceNameRuleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: List servicename rule.
      tags:
      - API.dataplane
  /api/dataplane/servicename/upsertRule:
    post:
      consumes:
      - application/json
      description: Create or update servicename rule.
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SetServiceNameRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Create or update servicename rule.
      tags:
      - API.dataplane
  /api/dataplane/services:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get all services.
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query cluster name
        in: query
        name: cluster
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryServicesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get all services.
      tags:
      - API.dataplane
  /api/dataplane/topology:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get service's topology.
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query cluster name
        in: query
        name: cluster
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryTopologyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get service's topology.
      tags:
      - API.dataplane
  /api/health:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: for k8s to check backend health status
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: for k8s to check backend health status
  /api/integration/adapter/update:
    get:
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.integration
  /api/integration/cluster/create:
    post:
      consumes:
      - application/json
      description: Create Cluster
      parameters:
      - description: Cluster Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: created cluster info
          schema:
            $ref: '#/definitions/integration.Cluster'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Create Cluster
      tags:
      - API.alertinput
  /api/integration/cluster/delete:
    get:
      consumes:
      - application/json
      description: DeleteCluster
      parameters:
      - description: Cluster Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: DeleteCluster
      tags:
      - API.alertinput
  /api/integration/cluster/get:
    get:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/integration.ClusterIntegration'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.integration
  /api/integration/cluster/install/cmd:
    get:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.GetCInstallRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/integration.GetCInstallRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.integration
  /api/integration/cluster/install/config:
    get:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: 请求信息
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.GetCInstallRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/integration.GetCInstallConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.integration
  /api/integration/cluster/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: ListCluster
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/integration.ListClusterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: ListCluster
      tags:
      - API.alertinput
  /api/integration/cluster/update:
    post:
      consumes:
      - application/json
      description: UpdateCluster
      parameters:
      - description: Cluster Info
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/integration.Cluster'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: UpdateCluster
      tags:
      - API.integration
  /api/integration/configuration:
    get:
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.integration
  /api/k8s/namespace/info:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get namespace information
      parameters:
      - description: namespace name
        in: query
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get namespace information
      tags:
      - API.k8s
  /api/k8s/namespaces:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get all namespace information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get all namespace information
      tags:
      - API.k8s
  /api/k8s/pod/info:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get pod information
      parameters:
      - description: namespace name
        in: query
        name: namespace
        required: true
        type: string
      - description: pod name
        in: query
        name: pod
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get pod information
      tags:
      - API.k8s
  /api/k8s/pods:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get all pod information
      parameters:
      - description: namespace name
        in: query
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get all pod information
      tags:
      - API.k8s
  /api/log/chart:
    post:
      consumes:
      - application/json
      description: get the log trend chart
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.LogQueryRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogChartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the log trend chart
      tags:
      - API.log
  /api/log/context:
    post:
      consumes:
      - application/json
      description: get log context
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.LogQueryContextRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogQueryContextResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get log context
      tags:
      - API.log
  /api/log/fault/content:
    post:
      description: get the contents of the fault site log
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetFaultLogContentRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetFaultLogContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the contents of the fault site log
      tags:
      - API.log
  /api/log/fault/pagelist:
    post:
      consumes:
      - application/json
      description: get fault site paging log
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetFaultLogPageListRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetFaultLogPageListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get fault site paging log
      tags:
      - API.log
  /api/log/index:
    post:
      consumes:
      - application/json
      description: analysis field index
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.LogIndexRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogIndexResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: analysis field index
      tags:
      - API.log
  /api/log/other:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get external log table
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.OtherTableRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OtherTableResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get external log table
      tags:
      - API.log
  /api/log/other/add:
    post:
      consumes:
      - application/json
      description: add external log table
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.AddOtherTableRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AddOtherTableResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: add external log table
      tags:
      - API.log
  /api/log/other/delete:
    delete:
      consumes:
      - application/json
      description: remove external log table
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteOtherTableRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DeleteOtherTableResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: remove external log table
      tags:
      - API.log
  /api/log/other/table:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get external log table information
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.OtherTableInfoRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OtherTableInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get external log table information
      tags:
      - API.log
  /api/log/query:
    post:
      consumes:
      - application/json
      description: query full logs
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.LogQueryRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: query all logs
      tags:
      - API.log
  /api/log/rule/add:
    post:
      consumes:
      - application/json
      description: new log table parsing rules
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.AddLogParseRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogParseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: new log table parsing rules
      tags:
      - API.log
  /api/log/rule/delete:
    delete:
      consumes:
      - application/json
      description: delete log table parsing rules
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteLogParseRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogParseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: delete log table parsing rules
      tags:
      - API.log
  /api/log/rule/get:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get log table parsing rules
      parameters:
      - description: database
        in: query
        name: dataBase
        required: true
        type: string
      - description: Table
        in: query
        name: tableName
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogParseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get log table parsing rules
      tags:
      - API.log
  /api/log/rule/service:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get the application log corresponding to the service
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetServiceRouteRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetServiceRouteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the application log corresponding to the service
      tags:
      - API.log
  /api/log/rule/update:
    post:
      consumes:
      - application/json
      description: update log table parsing rules
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateLogParseRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogParseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: update log table parsing rules
      tags:
      - API.log
  /api/log/table:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get log table information
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.LogTableInfoRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogTableInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get log table information
      tags:
      - API.log
  /api/metric/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/metric.QueryInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.metric
  /api/metric/query:
    post:
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/metric.QueryMetricsResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.metric
  /api/metric/queryPods:
    post:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.QueryPodsRequest'
      produces:
      - application/json
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.QueryPodsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.metric
  /api/network/podmap:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: query pod network call topology and call metrics
      parameters:
      - description: Start time, in microseconds
        in: query
        name: startTime
        required: true
        type: integer
      - description: End time, in microseconds
        in: query
        name: endTime
        required: true
        type: integer
      - description: Namespace to query, if the value is empty, query all
        in: query
        name: namespace
        type: string
      - description: Workload to be queried. If the value is empty, all of them will
          be queried
        in: query
        name: workload
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PodMapResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: query pod network call topology and call metrics
      tags:
      - API.Network
  /api/network/segments:
    get:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - description: traceId
        in: query
        name: traceId
        required: true
        type: string
      - description: spanId. If the value is blank, all items are queried
        in: query
        name: spanId
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SpanSegmentMetricsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      tags:
      - API.Network
  /api/permission/config:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get user's menu config.
      parameters:
      - description: User's id
        in: query
        name: userId
        required: true
        type: integer
      - description: language
        in: query
        name: language
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Gets user's menu config and which route can access.
      tags:
      - API.permission
  /api/permission/feature:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Gets all feature permission.
      parameters:
      - description: language
        in: query
        name: language
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profile.Feature'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Gets all feature permission.
      tags:
      - API.permission
  /api/permission/menu/configure:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Configure global menu.
      parameters:
      - collectionFormat: multi
        description: The list of feature's id
        in: formData
        items:
          type: integer
        name: permissionList
        required: true
        type: array
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Configure global menu.
      tags:
      - API.permission
  /api/permission/operation:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Grant or revoke user's permission(feature).
      parameters:
      - description: The id of authorized subject
        in: formData
        name: subjectId
        required: true
        type: integer
      - description: 'The type of authorized subject: ''role'',''user'',''team'''
        in: formData
        name: subjectType
        required: true
        type: string
      - description: 'The type of authorization: ''feature'',''data'''
        in: formData
        name: type
        required: true
        type: string
      - collectionFormat: multi
        description: The list of permissions' id
        in: formData
        items:
          type: integer
        name: permissionList
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Grant or revoke user's permission(feature).
      tags:
      - API.permission
  /api/permission/router:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Check a router is authorized to view.
      parameters:
      - description: Router
        in: query
        name: router
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Check a router is authorized to view.
      tags:
      - API.permission
  /api/permission/sub/feature:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Gets subject's permission.
      parameters:
      - description: language
        in: query
        name: language
        type: string
      - description: The id of authorized subject
        in: query
        name: subjectId
        required: true
        type: integer
      - description: user, role, team
        in: query
        name: subjectType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profile.Feature'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Gets subject's permission.
      tags:
      - API.permission
  /api/role/create:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Creates a role.
      parameters:
      - description: Role's name
        in: formData
        name: roleName
        required: true
        type: string
      - description: The description of role.
        in: formData
        name: description
        type: string
      - collectionFormat: multi
        description: Role's initial feature permission id list.
        in: formData
        items:
          type: integer
        name: permissionList
        type: array
      - collectionFormat: multi
        description: The id of users which will be granted the role.
        in: formData
        items:
          type: integer
        name: userList
        type: array
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Creates a role.
      tags:
      - API.role
  /api/role/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Delete a role.
      parameters:
      - description: Role's id
        in: formData
        name: roleId
        required: true
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Delete a role.
      tags:
      - API.role
  /api/role/operation:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Grants permission to user
      parameters:
      - description: User's id
        in: formData
        name: userId
        type: integer
      - collectionFormat: multi
        description: The id list of role which user has.
        in: formData
        items:
          type: integer
        name: roleList
        type: array
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Grant or revoke user's role.
      tags:
      - API.role
  /api/role/roles:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Gets all roles.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profile.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Gets all roles.
      tags:
      - API.role
  /api/role/update:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Update role's name and permission.
      parameters:
      - description: Role's id.
        in: formData
        name: roleId
        required: true
        type: integer
      - description: Role's name
        in: formData
        name: roleName
        required: true
        type: string
      - description: The description of role.
        in: formData
        name: description
        type: string
      - collectionFormat: multi
        description: Role's feature permission id list.
        in: formData
        items:
          type: integer
        name: permissionList
        type: array
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Update role's name and permission.
      tags:
      - API.role
  /api/role/user:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get user's role.
      parameters:
      - description: User's id
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profile.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get user's role.
      tags:
      - API.role
  /api/service/alert/events:
    post:
      consumes:
      - application/json
      description: get alarm events
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        type: string
      - collectionFormat: multi
        description: query service list
        in: query
        items:
          type: string
        name: services
        type: array
      - description: Query the alarm source
        in: query
        name: source
        type: string
      - description: Query alarm type
        in: query
        name: group
        type: string
      - description: Query alarm name
        in: query
        name: name
        type: string
      - description: Query alarm ID
        in: query
        name: id
        type: string
      - description: Query alarm status
        in: query
        name: status
        type: string
      - description: Paging parameter, current number of pages
        in: query
        name: currentPage
        type: integer
      - description: Pagination parameter, quantity per page
        in: query
        name: pageSize
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAlertEventsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get alarm events
      tags:
      - API.service
  /api/service/alert/sample/events:
    post:
      consumes:
      - application/json
      description: get sampling alarm events
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query the alarm source
        in: query
        name: source
        type: string
      - description: Query alarm type
        in: query
        name: group
        type: string
      - description: Query alarm name
        in: query
        name: name
        type: string
      - description: Query alarm ID
        in: query
        name: id
        type: string
      - description: Query alarm status
        in: query
        name: status
        type: string
      - description: Number of sample alarms
        in: query
        name: sampleCount
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAlertEventsSampleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get sampling alarm events
      tags:
      - API.service
  /api/service/descendant/metrics:
    post:
      consumes:
      - application/json
      description: get the delay curve data of all downstream services
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: query step (us)
        in: query
        name: step
        required: true
        type: integer
      - description: Ingress service name
        in: query
        name: entryService
        type: string
      - description: entry Endpoint
        in: query
        name: entryEndpoint
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.GetDescendantMetricsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the delay curve data of all downstream services
      tags:
      - API.service
  /api/service/descendant/relevance:
    post:
      consumes:
      - application/json
      description: get the dependent node delay correlation degree
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: query step (us)
        in: query
        name: step
        required: true
        type: integer
      - description: Ingress service name
        in: query
        name: entryService
        type: string
      - description: entry Endpoint
        in: query
        name: entryEndpoint
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.GetDescendantRelevanceResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the dependent node delay correlation degree
      tags:
      - API.service
  /api/service/endpoint/list:
    post:
      consumes:
      - application/json
      description: get the list of service EndPoint
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the list of service EndPoint
      tags:
      - API.service
  /api/service/endpoints:
    post:
      consumes:
      - application/json
      description: get the list of endpoints services
      parameters:
      - description: data group id
        in: query
        name: groupId
        type: integer
      - description: start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: step
        in: query
        name: step
        required: true
        type: integer
      - collectionFormat: multi
        description: service name
        in: query
        items:
          type: string
        name: serviceName
        type: array
      - collectionFormat: multi
        description: namespace
        in: query
        items:
          type: string
        name: namespace
        type: array
      - collectionFormat: multi
        description: endpoint
        in: query
        items:
          type: string
        name: endpointName
        type: array
      - description: sort rule
        in: query
        name: sortRule
        required: true
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ServiceEndPointsRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the list of endpoints services
      tags:
      - API.service
  /api/service/entry/endpoints:
    post:
      consumes:
      - application/json
      description: get the service entry Endpoint list
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: query step (us)
        in: query
        name: step
        required: true
        type: integer
      - description: Show missing entry
        in: query
        name: showMissTop
        type: boolean
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.GetServiceEntryEndpointsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the service entry Endpoint list
      tags:
      - API.service
  /api/service/error/instance:
    post:
      consumes:
      - application/json
      description: get the error instance
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: query step (us)
        in: query
        name: step
        required: true
        type: integer
      - description: Ingress service name
        in: query
        name: entryService
        type: string
      - description: entry Endpoint
        in: query
        name: entryEndpoint
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetErrorInstanceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the error instance
      tags:
      - API.service
  /api/service/errorinstance/logs:
    post:
      consumes:
      - application/json
      description: get the error instance failure site log
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: instance name
        in: query
        name: instance
        type: string
      - description: hostname
        in: query
        name: nodeName
        type: string
      - description: container name
        in: query
        name: containerId
        type: string
      - description: process number
        in: query
        name: pid
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/clickhouse.FaultLogResult'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the error instance failure site log
      tags:
      - API.service
  /api/service/getThreshold:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get individual threshold configuration information
      parameters:
      - description: app name
        in: query
        name: serviceName
        type: string
      - description: endpoint
        in: query
        name: endpoint
        type: string
      - description: Threshold level
        in: query
        name: level
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get individual threshold configuration information
      tags:
      - API.service
  /api/service/instance/list:
    post:
      consumes:
      - application/json
      deprecated: true
      description: get the list of service instances
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the list of service instances
      tags:
      - API.service
  /api/service/instance/options:
    post:
      consumes:
      - application/json
      description: get the drop-down list of service instances
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/model.ServiceInstance'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the drop-down list of service instances
      tags:
      - API.service
  /api/service/instanceinfo/list:
    post:
      consumes:
      - application/json
      deprecated: true
      description: get the list of service instances
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the list of service instances
      tags:
      - API.service
  /api/service/instances:
    post:
      consumes:
      - application/json
      description: get the URL instance corresponding to the service
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: step
        in: query
        name: step
        required: true
        type: integer
      - description: app name
        in: query
        name: serviceName
        required: true
        type: string
      - description: endpoint
        in: query
        name: endpoint
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InstancesRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the URL instance corresponding to the service
      tags:
      - API.service
  /api/service/k8s/events/count:
    post:
      consumes:
      - application/json
      description: get K8s events
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetK8sEventsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get K8s events
      tags:
      - API.service
  /api/service/list:
    post:
      consumes:
      - application/json
      description: get the list of services
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - collectionFormat: multi
        description: namespace
        in: query
        items:
          type: string
        name: namespace
        type: array
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the list of services
      tags:
      - API.service
  /api/service/log/logs:
    post:
      consumes:
      - application/json
      description: get Log fault site log
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: instance name
        in: query
        name: instance
        type: string
      - description: hostname
        in: query
        name: nodeName
        type: string
      - description: container name
        in: query
        name: containerId
        type: string
      - description: process number
        in: query
        name: pid
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/clickhouse.FaultLogResult'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get Log fault site log
      tags:
      - API.service
  /api/service/log/metrics:
    post:
      consumes:
      - application/json
      description: get log related metrics
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: query step (us)
        in: query
        name: step
        required: true
        type: integer
      - description: Ingress service name
        in: query
        name: entryService
        type: string
      - description: entry Endpoint
        in: query
        name: entryEndpoint
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.GetLogMetricsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get log related metrics
      tags:
      - API.service
  /api/service/monitor/status:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get the service status monitored by kuma
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetMonitorStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the service status monitored by kuma
      tags:
      - API.service
  /api/service/moreUrl:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get more url list of services
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: step
        in: query
        name: step
        required: true
        type: integer
      - description: app name
        in: query
        name: serviceName
        required: true
        type: string
      - description: sort logic
        in: query
        name: sortRule
        required: true
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ServiceDetail'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get more url list of services
      tags:
      - API.service
  /api/service/namespace/list:
    post:
      consumes:
      - application/json
      description: Get monitored namespaces.
      parameters:
      - description: start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: end time
        in: query
        name: endTime
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetServiceNamespaceListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get monitored namespaces.
      tags:
      - API.service
  /api/service/polaris/infer:
    post:
      consumes:
      - application/json
      description: Get Polaris metric Analysis
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: query step (us)
        in: query
        name: step
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetPolarisInferResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get Polaris metric Analysis
      tags:
      - API.service
  /api/service/redcharts:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Get services' red charts.
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.GetServiceREDChartsRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetServiceREDChartsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get services' red charts.
      tags:
      - API.service
  /api/service/relation:
    post:
      consumes:
      - application/json
      description: the call relationship between the upstream and downstream service
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: Ingress service name
        in: query
        name: entryService
        type: string
      - description: entry Endpoint
        in: query
        name: entryEndpoint
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetServiceEndpointRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the call relationship between the upstream and downstream services
      tags:
      - API.service
  /api/service/ryglight:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get traffic light results
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Service name
        in: query
        name: serviceName
        type: string
      - description: interface name
        in: query
        name: endpointName
        type: string
      - description: namespace
        in: query
        name: namespace
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ServiceRYGLightRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get traffic light results
      tags:
      - API.service
  /api/service/servicesAlert:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: get the log alarm and status light information of the Service
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: step
        in: query
        name: step
        required: true
        type: integer
      - collectionFormat: multi
        description: application name
        in: query
        items:
          type: string
        name: serviceNames
        required: true
        type: array
      - collectionFormat: multi
        description: return data content
        in: query
        items:
          type: string
        name: returnData
        type: array
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ServiceAlertRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the log alarm and status light information of the Service
      tags:
      - API.service
  /api/service/setThreshold:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: configuration single threshold configuration information
      parameters:
      - description: threshold level
        in: formData
        name: level
        required: true
        type: string
      - description: app name
        in: formData
        name: serviceName
        type: string
      - description: endpoint
        in: formData
        name: endpoint
        type: string
      - description: YoY Delay
        in: formData
        name: latency
        required: true
        type: number
      - description: YoY Error Rate
        in: formData
        name: errorRate
        required: true
        type: number
      - description: Number of requests compared with the same period last year
        in: formData
        name: tps
        required: true
        type: number
      - description: year-on-year log alarm
        in: formData
        name: log
        required: true
        type: number
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: configuration single threshold configuration information
      tags:
      - API.service
  /api/service/sql/metrics:
    post:
      consumes:
      - application/json
      description: get SQL metrics
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: query step (us)
        in: query
        name: step
        required: true
        type: integer
      - description: Sort method (latency/errorRate/tps)
        in: query
        name: sortBy
        required: true
        type: string
      - description: Paging parameter, current number of pages
        in: query
        name: currentPage
        type: integer
      - description: Pagination parameter, quantity per page
        in: query
        name: pageSize
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSQLMetricsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get SQL metrics
      tags:
      - API.service
  /api/service/topology:
    post:
      consumes:
      - application/json
      description: get the upstream and downstream topology of the service
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: Ingress service name
        in: query
        name: entryService
        type: string
      - description: entry Endpoint
        in: query
        name: entryEndpoint
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetServiceEndpointTopologyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the upstream and downstream topology of the service
      tags:
      - API.service
  /api/service/trace/logs:
    post:
      consumes:
      - application/json
      description: get trace fault site log
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: instance name
        in: query
        name: instance
        type: string
      - description: hostname
        in: query
        name: nodeName
        type: string
      - description: container name
        in: query
        name: containerId
        type: string
      - description: process number
        in: query
        name: pid
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/clickhouse.FaultLogResult'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get trace fault site log
      tags:
      - API.service
  /api/service/trace/metrics:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: get Trace related metrics
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Query service name
        in: query
        name: service
        required: true
        type: string
      - description: Query Endpoint
        in: query
        name: endpoint
        required: true
        type: string
      - description: query step (us)
        in: query
        name: step
        required: true
        type: integer
      - description: Ingress service name
        in: query
        name: entryService
        type: string
      - description: entry Endpoint
        in: query
        name: entryEndpoint
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.GetTraceMetricsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get Trace related metrics
      tags:
      - API.service
  /api/team:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get teams.
      parameters:
      - description: Team's name
        in: query
        name: teamName
        type: string
      - collectionFormat: multi
        description: The list of feature's id
        in: query
        items:
          type: integer
        name: featureList
        type: array
      - collectionFormat: multi
        description: The list of data group's id
        in: query
        items:
          type: integer
        name: dataGroupList
        type: array
      - description: Current page
        in: query
        name: currentPage
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTeamResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get teams.
      tags:
      - API.team
  /api/team/create:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Creates a team.
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateTeamRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Creates a team.
      tags:
      - API.team
  /api/team/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Delete a team.
      parameters:
      - description: Team's id
        in: formData
        name: teamId
        required: true
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Delete a team.
      tags:
      - API.team
  /api/team/operation:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Assigns a user to teams or removes a user from teams.
      parameters:
      - description: User's id
        in: formData
        name: userId
        required: true
        type: integer
      - collectionFormat: multi
        description: The list of team id.
        in: formData
        items:
          type: integer
        name: teamList
        type: array
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Assigns a user to teams or removes a user from teams.
      tags:
      - API.team
  /api/team/update:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Update team's information.
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTeamRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Update team's information.
      tags:
      - API.team
  /api/team/user:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get team's users.
      parameters:
      - description: Team's id
        in: query
        name: teamId
        required: true
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profile.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get team's users.
      tags:
      - API.team
  /api/team/user/operation:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Assigns users to a team or remove users from a team.
      parameters:
      - description: Team's id
        in: formData
        name: teamId
        required: true
        type: integer
      - collectionFormat: multi
        description: The list of users' id.
        in: formData
        items:
          type: integer
        name: userList
        type: array
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Assigns users to a team or remove users from a team.
      tags:
      - API.team
  /api/trace/flame:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get the flame chart data of the specified time period and specified
        conditions
      parameters:
      - description: sample type
        in: query
        name: sampleType
        required: true
        type: string
      - description: process id
        in: query
        name: pid
        required: true
        type: integer
      - description: thread id
        in: query
        name: tid
        required: true
        type: integer
      - description: hostname
        in: query
        name: nodeName
        type: string
      - description: start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: span id
        in: query
        name: spanId
        required: true
        type: string
      - description: trace id
        in: query
        name: traceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetFlameDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get the flame chart data of the specified time period and specified
        conditions
      tags:
      - API.trace
  /api/trace/flame/process:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get and integrate process-level flame graph data
      parameters:
      - description: Limit number of nodes
        in: query
        name: maxNodes
        type: integer
      - description: start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: process id
        in: query
        name: pid
        required: true
        type: integer
      - description: hostname
        in: query
        name: nodeName
        type: string
      - description: sample type
        in: query
        name: sampleType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetProcessFlameGraphResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get and integrate process-level flame graph data
      tags:
      - API.trace
  /api/trace/info:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get single link trace details
      parameters:
      - description: trace id
        in: query
        name: traceId
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get single link trace details
      tags:
      - API.trace
  /api/trace/onoffcpu:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get span execution consumption
      parameters:
      - description: start time, unit nanosecond
        in: query
        name: startTime
        required: true
        type: integer
      - description: end time, unit nanosecond
        in: query
        name: endTime
        required: true
        type: integer
      - description: process id
        in: query
        name: pid
        required: true
        type: integer
      - description: node name
        in: query
        name: nodeName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetOnOffCPUResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: get span execution consumption
      tags:
      - API.trace
  /api/trace/pagelist:
    post:
      consumes:
      - application/json
      description: to query the trace paging list
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetTracePageListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTracePageListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: to query the trace paging list
      tags:
      - API.trace
  /api/trace/pagelist/filter/value:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: query the available values of the specified filter
      parameters:
      - description: Request information
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GetTraceFilterValueRequest'
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTraceFilterValueResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: query the available values of the specified filter
      tags:
      - API.trace
  /api/trace/pagelist/filters:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: the available filters for querying the Trace list
      parameters:
      - description: query start time
        in: query
        name: startTime
        required: true
        type: integer
      - description: query end time
        in: query
        name: endTime
        required: true
        type: integer
      - description: Whether to update the available filters immediately based on
          the time entered by the user
        in: query
        name: needUpdate
        type: boolean
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTraceFiltersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: the available filters for querying the Trace list
      tags:
      - API.trace
  /api/user/create:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Create a user.
      parameters:
      - description: username
        in: formData
        name: username
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      - description: Confirm password
        in: formData
        name: confirmPassword
        required: true
        type: string
      - collectionFormat: multi
        description: role id
        in: formData
        items:
          type: integer
        name: roleList
        type: array
      - description: mailbox
        in: formData
        name: email
        type: string
      - description: Phone number
        in: formData
        name: phone
        type: string
      - description: organization
        in: formData
        name: corporation
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Create a user.
      tags:
      - API.user
  /api/user/info:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get user's info.
      parameters:
      - description: User's id
        in: query
        name: userId
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get user's info.
      tags:
      - API.user
  /api/user/list:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get user list.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      - description: Username
        in: query
        name: username
        type: string
      - description: Current page
        in: query
        name: currentPage
        type: string
      - description: The size of page
        in: query
        name: pageSize
        type: string
      - collectionFormat: multi
        description: Role id list
        in: query
        items:
          type: integer
        name: roleList
        type: array
      - collectionFormat: multi
        description: Team id list
        in: query
        items:
          type: integer
        name: teamList
        type: array
      - description: 组织
        in: query
        name: corporation
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get user list.
      tags:
      - API.user
  /api/user/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Login
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Login
      tags:
      - API.user
  /api/user/logout:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Logout
      parameters:
      - description: accessToken
        in: formData
        name: accessToken
        required: true
        type: string
      - description: refreshToken
        in: formData
        name: refreshToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Logout
      tags:
      - API.user
  /api/user/refresh:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Refresh accessToken
      parameters:
      - description: Bearer refreshToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Refresh accessToken
      tags:
      - API.user
  /api/user/remove:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Remove a user.
      parameters:
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      - description: User's id
        in: formData
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Remove a user.
      tags:
      - API.user
  /api/user/reset:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Reset user's password.
      parameters:
      - description: User's id
        in: formData
        name: userId
        required: true
        type: integer
      - description: New password
        in: formData
        name: newPassword
        required: true
        type: string
      - description: Confirm password
        in: formData
        name: confirmPassword
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Reset user's password.
      tags:
      - API.user
  /api/user/team:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get user's team.
      parameters:
      - description: User's is
        in: query
        name: userId
        required: true
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profile.Team'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Get user's team.
      tags:
      - API.user
  /api/user/update/email:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Update email.
      parameters:
      - description: User's id
        in: formData
        name: userId
        required: true
        type: integer
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Update email.
      tags:
      - API.user
  /api/user/update/info:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Update user's info.
      parameters:
      - description: User's id
        in: formData
        name: userId
        required: true
        type: integer
      - collectionFormat: multi
        description: The list of user's role.
        in: formData
        items:
          type: integer
        name: roleList
        type: array
      - description: Corporation
        in: formData
        name: corporation
        type: string
      - description: Phone number
        in: formData
        name: phone
        type: string
      - description: Email
        in: formData
        name: email
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Update user's info.
      tags:
      - API.user
  /api/user/update/password:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Update password.
      parameters:
      - description: User's id
        in: formData
        name: userId
        required: true
        type: integer
      - description: Original password
        in: formData
        name: oldPassword
        required: true
        type: string
      - description: New password
        in: formData
        name: newPassword
        required: true
        type: string
      - description: Confirm password
        in: formData
        name: confirmPassword
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Update password.
      tags:
      - API.user
  /api/user/update/phone:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Update phone number
      parameters:
      - description: User's id
        in: formData
        name: userId
        required: true
        type: integer
      - description: Phone number
        in: formData
        name: phone
        required: true
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Update phone number
      tags:
      - API.user
  /api/user/update/self:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Update self info.
      parameters:
      - description: User's id
        in: formData
        name: userId
        required: true
        type: integer
      - description: Corporation
        in: formData
        name: corporation
        type: string
      - description: Phone number
        in: formData
        name: phone
        type: string
      - description: Email
        in: formData
        name: email
        type: string
      - description: Bearer accessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Update self info.
      tags:
      - API.user
  /api/v2/data/group/delete:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Delete the data group.
      parameters:
      - description: Data group's id
        in: formData
        name: groupId
        required: true
        type: integer
      - description: Bearer accessToken
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/code.Failure'
      summary: Delete the data group.
      tags:
      - API.data
swagger: "2.0"
