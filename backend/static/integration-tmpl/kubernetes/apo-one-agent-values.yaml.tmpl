global:
  clusterId: {{ default ._cluster_id "default"}}
  edition: ee
  image:
    # kindlingx official mirror repository: registry.cn-hangzhou.aliyuncs.com/kindlingx
    repository: "registry.cn-hangzhou.aliyuncs.com/kindlingx"
    eeRepository: "registry.cn-hangzhou.aliyuncs.com/kindlingx"
    pullPolicy: "Always"
  # APO Collection Modes
  # - trace              Full data collection, automatically injects trace collection probes
  # - trace-collector    Use collector to receive trace data from external probes
  # - trace-sidecar      Do not accept external trace data, directly retrieve data from external APIs, this mode requires configuring external API data sources
  # - metrics            Full metrics data collection
  # - log                Full log collection, including fault scenario logs
  # - log-sample         Fault scenario log collection, without collecting full logs
  agentCollectorMode:
{{- range ._modes }}
    - {{ . }}
{{- end }}
  apoProxyUrl: {{ default .apoCollector.collectorAddr "apo-nginx-proxy-svc" }}
  apoProxyPort: {{ default .apoCollector.ports.apoProxy 30044 }}

  apoServerIP: {{ .apoCollector.collectorGatewayAddr }}
  apoBackendPort: {{ default .apoCollector.ports.apoBackend 31363 }}
  apoCollectorPort: {{ default .apoCollector.ports.apoCollector 30044 }}
  apoOtelCollectorGatewayGRPCPort: {{ default .apoCollector.ports.apoOtelCollectorGatewayGrpc 30317 }}
  apoOtelCollectorGatewayK8SPort: {{ default .apoCollector.ports.apoOtelCollectorGatewayK8s 30319 }}
  apoVectorLogPort: {{ default .apoCollector.ports.apoVector 30310 }}

apoOneAgent:
  enabled: true
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/ebpf-agent" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  config:
    apoCollectorUrl: "{{ "{{ .Values.global.apoProxyUrl }}" }}"
    apoCollectorPort: "{{ "{{ .Values.global.apoProxyPort }}" }}"

apoNodeAgent:
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/node-agent" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  apoOtelCollectorUrl: "apo-otel-collector-svc:8080"

apoIlogtail:
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/ilogtail" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  apoOtelCollectorGrpcUrl: "apo-otel-collector-svc:4317"
  apoVectorLogUrl: "{{ "{{ .Values.global.apoServerIP }}:{{ .Values.global.apoVectorLogPort }}" }}"

grafanaAlloy:
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/grafana-alloy" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"

grafanaBeyla:
  enabled: false
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/apo-beyla" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  config:
    k8sNamespace: "{{ "^/(/?/!{{ .Release.Namespace }}$).*" }}"

odiglet:
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/apo-odiglet" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  apoOtelCollectorGrpcUrl: "{{ "apo-otel-collector-svc.{{ .Release.Namespace }}:4317" }}"
  apoOtelCollectorHttpUrl: "{{ "apo-otel-collector-svc.{{ .Release.Namespace }}:4318" }}"
  apoOtelCollectorSkywalkingUrl: "{{ "apo-otel-collector-svc.{{ .Release.Namespace }}:11800" }}"

apoOtelCollectorAgent:
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/apo-otel-collector" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  config:
    apoCollectorUrl: "{{ "{{ .Values.global.apoProxyUrl }}" }}"
    apoCollectorPort: "{{ "{{ .Values.global.apoProxyPort }}" }}"
    apoOtelCollectorUrl: "apo-otel-collector-svc"
    apoOtelCollectorGRPCPort: "4317"

originxGcAgent:
  image:
    repository: "{{ "{{ .Values.global.image.eeRepository }}/originx-gc-agent" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  config:
    apoCollectorUrl: "{{ "{{ .Values.global.apoProxyUrl }}" }}"
    apoCollectorPort: "{{ "{{ .Values.global.apoProxyPort }}" }}"

odigos:
  enabled: true
  instrumentor:
    image:
      repository: "{{ "{{ .Values.global.image.repository }}/apo-odigos-instrumentor" }}"
      imagePullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
    # targetNamespace
    # name: Target namespace
    # value:
    #   enabled: Inject all existing services but do not inject newly added applications
    #   enabledFuture: Inject both current and future services
    #   disabled: Do not inject services in the specified namespace; used to exclude specific namespaces when instrument-all-namespace is enabled
    # targetNamespace:
    # - name: default
    #   value: disabled
    # instrument-all-namespace Whether to inject all namespaces
    # Equivalent to setting enabledFuture for all namespaces
    # However, if disabled is already set for a namespace or workload, it will not be injected
    targetNamespace:
    {{- range .trace.selfCollectConfig.instrumentNS }}
    - name: {{ . }}
      value: enabledFuture
    {{- end}}
    {{- range .trace.selfCollectConfig.instrumentDisabledNS }}
    - name: {{ . }}
      value: disabled
    {{- end}}
    instrumentAllNamespace: {{ .trace.selfCollectConfig.instrumentAll }}
    # force-instrument-all-namespace Whether to force inject all namespaces
    # Similar to instrument-all-namespace, sets enabledFuture for all namespaces
    # Ignores all disabled settings
    forceInstrumentAllNamespace: false
  config:
    apoOtelCollectorGrpcUrl: "{{ "apo-otel-collector-svc.{{ .Release.Namespace }}:4317" }}"
    apoOtelCollectorHttpUrl: "{{ "apo-otel-collector-svc.{{ .Release.Namespace }}:4318" }}"
    apoOtelCollectorSkywalkingUrl: "{{ "apo-otel-collector-svc.{{ .Release.Namespace }}:11800" }}"
    javaAgentType: "opentelemetry"

apo-nginx-proxy:
  enabled: true
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/nginx" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  config:
    apoCollectorUrl: "{{ "{{ .Values.global.apoServerIP }}" }}"
    apoCollectorPort: "{{ "{{ .Values.global.apoCollectorPort }}" }}"

apo-otel-collector:
  enabled: true
  image:
    repository: "{{ "{{ .Values.global.image.repository }}/apo-otel-collector" }}"
    pullPolicy: "{{ "{{ .Values.global.image.pullPolicy }}" }}"
  config:
    apoBackendUrl: "{{ "{{ .Values.global.apoServerIP }}" }}"
    apoBackendPort: "{{ "{{ .Values.global.apoBackendPort }}" }}"
    apoOtelCollectorGatewayURL: "{{ "{{ .Values.global.apoServerIP }}" }}"
    apoOtelCollectorGatewayGRPCPort: "{{ "{{ .Values.global.apoOtelCollectorGatewayGRPCPort }}" }}"
    apoOtelCollectorGatewayK8SPort: "{{ "{{ .Values.global.apoOtelCollectorGatewayK8SPort }}" }}"
    clusterID: "{{ .name }}"