{
  "clusterName": "Cluster Name",
  "clusterType": "Cluster Type",
  "dataIntegrationSettings": "Settings",
  "traceIntegration": "Trace Integration",
  "apmType": "APM Type",
  "mode": "Mode",
  "datasourceApo": "APO Self-Collect",
  "datasourceExisted": "Existing Data Source Integration Methods",
  "aliyunArms": "Alibaba ARMS",
  "tingyun": "Tingyun",
  "hauwei": "Huawei APM",
  "other": "Other",
  "timeout": "Trace API Query Timeout Duration",
  "timeoutHint": "A timeout setting that is too short may result in the inability to properly query link data.",
  "second": "s",
  "address": "Tracing API Endpoint",
  "user": "User",
  "password": "Password",
  "accessKey": "ARMS Access Key",
  "accessSecret": "ARMS Access Secret",
  "collectorAddr": "APO Collector Address",
  "collectorGatewayAddr": "APO Collector Gateway Address",
  "collectorGatewayAddrHint": "The externally exposed address of the APO server.",
  "instrumentAll": "Instrument All Namespace",
  "yes": "Yes",
  "no": "No",
  "instrumentNS": "Namespaces to be Injected",
  "instrumentDisabledNS": "Namespaces to exclude from injection ",
  "namespacePlaceholder": "<span> Enter namespaces separated by comma , ",
  "metricsIntegration": "Metrics Integration",
  "dsType": "Integration type",
  "typeNotSupport": "This feature is not available yet. Please stay tuned for updates!",
  "integrationMode": "Integration Mode",
  "metricsName": "Metrics Integration Name",
  "vmConfig": {
    "serverURL": "Server URL",
    "password": "Datasource Password",
    "username": "Datasource User"
  },
  "dbType": "Logs Integration type",
  "logsIntegration": "Logs Integration",
  "chConfig": {
    "address": "Database Address",
    "password": "Database Password",
    "username": "Database Username",
    "database": "Database Name",
    "replication": "Replication",
    "cluster": "ClickHouse Cluster Name"
  },
  "logsName": "Logs Database Name",
  "saveSettings": "Save And Next Step",
  "advanced": "Advanced Settings",
  "ports": "Ports",
  "apoCollectorSetting": "APO Server",
  "apoCollector": {
    "port1": "Used to receive link trace sampling data",
    "port2": "Used to receive and process log data",
    "port3": "Used to receive observability data, OTLP gRPC protocol",
    "port4": "Used to receive K85 cluster data, OTLP gRPC protocol",
    "port5": "Used to provide query API services"
  },
  "sidecar": "Suitable for scenarios where the Tracing probe is already in use, and there is no intention to modify the Traces data sending address. APO will query data through the Trace system API.",
  "collector": "Suitable for scenarios where the Tracing probe is already in use, and it is possible to modify the Traces data sending address. APO will receive and store Traces data.",
  "comName": "Component Name",
  "port": "Port",
  "guide": "Integration Guide",
  "config": "Configuration",
  "installCmdTitle": "Installation and Setup Commands",
  "saveSettingsSuccess": "Save Cluster Integration Successfully",
  "confirmDelete": "Are you sure to delete the cluster integration {{name}}",
  "required": " is required",
  "sidecarGlobal": "The same link tracking system shares the same configuration. Any modifications to this configuration take effect globally.",
  "vm": "Traditional Server",
  "balckList": "The specified items will be excluded from all namespaces.",
  "metricsHint": "Currently, only APO Self-Collect is supported. APO collects metrics with relatively low resource usage and data volume. Support for integrating other data sources is coming soon, so stay tuned",
  "logHint": "Currently, only APO Self-Collect is supported. APO collects logs with relatively low resource usage and data volume. Support for integrating other data sources is coming soon, so stay tuned",
  "logCollectMode": "Log collection method",
  "logCollect": {
    "full": "Full Log Collection",
    "sample": "Collect Only Error Logs"
  },
  "selfConfig": "APO Self-Collect Config",
  "sampleHint": "Only collect logs for slow requests and error requests at relevant time points, significantly reducing the volume of logs.",
  "collectorDoc": {
    "selfConfig": "Collector Integration Mode for Existing Metric Data",
    "installationMethod": "Install APO OneAgent in trace-collector mode and then send the existing probe data to",
    "connectionMethod": "Connection Method",
    "agentInstallation": "APO requires an Agent installed on each host to obtain process information.",
    "probeAddressModification": "Modify the probe data sending address to the local APO OneAgent address.",
    "advantages": "Advantages: Supports Java, Go, Python, and other programming languages. Can utilize all APO features.",
    "disadvantages": "Disadvantages: Requires adjustment of the tracing probe data sending address.",
    "specificSteps": "Specific Steps",
    "otlpSupport": "For Traces data that supports OTLP format:",
    "grpcUsage": "If you use the gRPC protocol to send data, please use http://<local_IP>:4317",
    "httpUsage": "If you use the HTTP protocol to send data, please use http://<local_IP>:4318",
    "skyWalking": "For SkyWalking:",
    "skyWalkingGrpc": "If you use the gRPC protocol to send data, please use http://<local_IP>:11800",
    "skyWalkingHttp": "If you use the HTTP protocol to send data, please use http://<local_IP>:12800"
  },
  "installCmd": {
    "install": "Installation Command",
    "helmInstall": "Install Using Helm",
    "prereq": "Prerequisites",
    "prereqDesc": "Ensure your environment meets the following conditions:",
    "k8sVer": "Kubernetes version â‰¥1.18",
    "helmVer": "Helm version â‰¥3.0",
    "admin": "Administrator privileges on the cluster",
    "step1": "Step 1: Download Helm Configuration File",
    "downloadWays": "You can choose one of the following ways to obtain the configuration file:",
    "way1": "Option 1: Run the following command:",
    "downloadCmd": "curl -Lo apo-one-agent-values.yaml \\n http://{{ .apoCollector.collectorGatewayAddr }}:{{ default .apoCollector.ports.apoBackend 31363 }}/api/integration/cluster/install/config?clusterId={{ .id}}",
    "way2": "Option 2: Click the download button",
    "btnHelm": "Helm Configuration File",
    "step2": "Step 2: Install Using Helm",
    "executeCmd": "Copy and execute the command in the directory where the downloaded file is located.",

    "paramDesc": "Parameter Description",
    "paramN": "Specifies the namespace as",
    "paramCreateNamespace": "Creates the <a>`apo`</a> namespace if it does not exist.",
    "paramF": "Uses the downloaded configuration file for installation.",

    "verify": "Installation Verification",
    "verifyCmd": "After installation, you can check if the pods are running using the following command:",
    "checkPods": "kubectl get pods -n apo",
    "successMsg": "If all pods are in Running status, the installation was successful ðŸŽ‰.If an issue occurs, please refer to the 'FAQ' section in the documentation.",
    "dockerInstall": "Install Using Docker Compose",
    "dockerDesc": "On the server that needs monitoring, you can use Docker Compose to install and manage the OneAgent service. Follow these steps to proceed:",
    "step1Docker": "Step 1: Download Configuration File",
    "chooseDownload": "You can choose one of the following ways to obtain the configuration file:",
    "downloadCmdDocker": "curl -Lo installCfg.sh \\n http://{{ .apoCollector.collectorGatewayAddr }}:{{ default .apoCollector.ports.apoBackend 31363 }}/api/integration/cluster/install/config?clusterId={{ .id}}",
    "step2Docker": "Step 2: Download Deployment Package",
    "downloadPackage": "Download the deployment package suitable for your environment.",
    "step3Docker": "Step 3: Execute Installation Script",
    "runInDir": "Execute the following command in the directory where the configuration file and deployment package are located.",
    "verifyDocker": "After installation, you can check if the Docker container is running using:",
    "checkDocker": "docker ps",
    "successMsgDocker": "If you see apo-related containers running, the installation was successful ðŸŽ‰.If an issue occurs, please refer to the 'FAQ' section in the documentation.",
    "helmConfigFile": "Helm Installation Configuration File"
  },
  "ee": "Enterprise Edition",
  "eeToast": "Upgrading to the Enterprise Edition will enable you to select this type of access."
}
